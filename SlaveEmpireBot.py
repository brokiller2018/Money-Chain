import logging
import asyncio
import json
import os
import psycopg2
from psycopg2.extras import Json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from datetime import datetime, timedelta
from psycopg2.pool import ThreadedConnectionPool


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"
DATABASE_URL = os.getenv("DATABASE_URL")
pool = ThreadedConnectionPool(1, 20, dsn=DATABASE_URL)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPGRADE_PREFIX = "upg_"
SLAVE_PREFIX = "slv_"
MAIN_MENU = "main_menu"
WORK = "work"
UPGRADES = "upgrades"
PROFILE = "profile"
REF_LINK = "ref_link"
BUY_MENU = "buy_menu"
CHECK_SUB = "check_sub_"
SEARCH_USER = "search_user"
TOP_OWNERS = "top_owners"
BUYOUT_PREFIX = "buyout_"
SHIELD_PREFIX = "shield_"
SHACKLES_PREFIX = "shackles_"
MAX_SLAVE_LEVEL = 15
DAILY_WORK_LIMIT = 10
MAX_BARRACKS_LEVEL = 10
DAILY_WORK_LIMIT = 7
MIN_SLAVES_FOR_RANDOM = 3 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
user_search_cache = {}

# –£–ª—É—á—à–µ–Ω–∏—è
upgrades = {
    "storage": {
        "name": "üì¶ –°–∫–ª–∞–¥",
        "base_price": 300, 
        "income_bonus": 5,
        "price_multiplier": 1.3,
        "description": "+8 –º–æ–Ω–µ—Ç/–º–∏–Ω –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É"
    },
    "whip": {
        "name": "‚õì –ö–Ω—É—Ç—ã", 
        "base_price": 800,
        "income_bonus": 0.18,  # +18% –∫ —Ä–∞–±–æ—Ç–µ (–±—ã–ª–æ +25%)
        "price_multiplier": 1.3,
        "description": "+18% –∫ –¥–æ—Ö–æ–¥—É –æ—Ç —Ä–∞–±–æ—Ç—ã"
    },
    "food": {
        "name": "üçó –ï–¥–∞",
        "base_price": 1500,
        "income_bonus": 0.08,  # -8% –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        "price_multiplier": 1.5,
        "description": "-8% –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"
    },
    "barracks": {
        "name": "üè† –ë–∞—Ä–∞–∫–∏",
        "base_price": 3000,
        "income_bonus": 2,  # +2 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤
        "price_multiplier": 1.6,
        "description": "+2 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data=WORK)],
        [
            InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data=UPGRADES),
            InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE)
        ],
        [
            InlineKeyboardButton(text="üë• –ö—É–ø–∏—Ç—å —Ä–∞–±–∞", callback_data=BUY_MENU),
            InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
        ],
        [    
            InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data=REF_LINK),
            InlineKeyboardButton(text="üèÜ –¢–æ–ø –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤", callback_data=TOP_OWNERS)
        ]
    ])

def get_db_connection():
    return pool.getconn()

def return_db_connection(conn):
    pool.putconn(conn)

def get_user(user_id: int) -> dict | None:
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (user_id,))
            result = cur.fetchone()
            return deserialize_user_data(result[0]) if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None
    finally:
        return_db_connection(conn)
def upgrades_keyboard(user_id):
    buttons = []
    user = get_user(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if not user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", callback_data=MAIN_MENU)]
        ])
    
    for upgrade_id, data in upgrades.items():
        level = user.get("upgrades", {}).get(upgrade_id, 0)  # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        price = data["base_price"] * (level + 1)
        buttons.append([
            InlineKeyboardButton(
                text=f"{data['name']} (–£—Ä. {level}) - {price}‚ÇΩ | {data['description']}",
                callback_data=f"{UPGRADE_PREFIX}{upgrade_id}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def buy_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data=SEARCH_USER)],
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–±—ã (–¢–æ–ø-10)", callback_data="random_slaves")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ])
    
def serialize_user_data(user_data: dict) -> dict:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON"""
    serialized = {}
    for key, value in user_data.items():
        if isinstance(value, datetime):
            serialized[key] = value.isoformat()
        elif isinstance(value, dict) and key == "shackles":
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–∞–Ω–¥–∞–ª—ã
            serialized[key] = {
                str(slave_id): end_time.isoformat() 
                for slave_id, end_time in value.items()
            }
        else:
            serialized[key] = value
    return serialized

def deserialize_user_data(data: dict) -> dict:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –∏–∑ —Å—Ç—Ä–æ–∫"""
    deserialized = {}
    for key, value in data.items():
        if key in ['last_passive', 'last_work', 'shield_active'] and value:
            try:
                deserialized[key] = datetime.fromisoformat(value)
            except (TypeError, ValueError):
                deserialized[key] = None
        elif key == "shackles" and isinstance(value, dict):
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–∞–Ω–¥–∞–ª—ã
            deserialized[key] = {
                int(slave_id): datetime.fromisoformat(end_time)
                for slave_id, end_time in value.items()
            }
        else:
            deserialized[key] = value
    return deserialized

def create_user(user_id: int, username: str, referrer_id: int = None) -> dict:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    new_user = {
        "balance": 100,
        "slaves": [],
        "owner": None,
        "base_price": 100,
        "slave_level": 0,
        "price": 100,
        "last_work": None,
        "upgrades": {key: 0 for key in upgrades},
        "total_income": 0,
        "username": username,
        "shield_active": None,
        "shackles": {},
        "shop_purchases": 0,
        "last_passive": datetime.now(),
        "income_per_sec": 0.0167,
        "referrer": referrer_id,
    }
    
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO bot_users (user_id, data) VALUES (%s, %s)",
                (user_id, Json(serialize_user_data(new_user)))
            )
            conn.commit()
        return new_user
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise
    finally:
        conn.close()


def get_user(user_id: int) -> dict | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (user_id,))
            result = cur.fetchone()
            return deserialize_user_data(result[0]) if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None
    finally:
        conn.close()

def update_user(user_id: int, user_data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute(
                "UPDATE bot_users SET data = %s WHERE user_id = %s",
                (Json(serialize_user_data(user_data)), user_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            )
            conn.commit()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise
    finally:
        conn.close()

def passive_income(user):
    base = 1 + user["upgrades"].get("storage", 0) * 5
    slaves = sum(
        50 * (1 + 0.2 * slave_level(slave_id)) 
        for slave_id in user.get("slaves", [])
    )
    return base + slaves * (1 + 0.05 * user["upgrades"].get("barracks", 0))

def calculate_shield_price(user_id):
    user = get_user(user_id)
    if not user:
        return 500  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ (1 + —Å–∫–ª–∞–¥) –≤ –º–∏–Ω—É—Ç—É
    passive_per_min = 1 + user.get("upgrades", {}).get("storage", 0) * 10
    
    # –î–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    for slave_id in user.get("slaves", []):
        slave = get_user(slave_id)
        if slave:
            passive_per_min += 100 * (1 + 0.3 * slave.get("slave_level", 0))
    
    # –¶–µ–Ω–∞ = 50% –¥–æ—Ö–æ–¥–∞ –∑–∞ 12 —á–∞—Å–æ–≤, –æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ 10
    base_price = passive_per_min * 60 * 6  # 6 —á–∞—Å–æ–≤
    shop_purchases = user.get("shop_purchases", 0)
    price = base_price * (1.1 ** shop_purchases) 
    price = max(500, min(8000, price))  # –õ–∏–º–∏—Ç—ã
    
    # –°–∫–∏–¥–∫–∞ –∑–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É
    if user.get("shop_purchases", 0) == 0:
        price = int(price * 0.7)
    
    return int(price)

def calculate_shackles_price(owner_id):
    owner = get_user(owner_id)
    if not owner:
        return 300  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    
    # 1. –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ (—Å–∫–ª–∞–¥) –≤ —á–∞—Å
    passive_income = (1 + owner.get("upgrades", {}).get("storage", 0) * 10) * 60
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤
    for slave_id in owner.get("slaves", []):
        slave = get_user(slave_id)
        if slave:
            passive_income += 100 * (1 + 0.3 * slave.get("slave_level", 0))
    
    # 3. –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
    price = int(passive_income * 1.5 / 100) * 100
    return max(300, min(10_000, price))

def slave_price(slave_data: dict) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Ä–∞–±–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    base_price = slave_data.get("base_price", 100)
    level = slave_data.get("slave_level", 0)
    return int(200 * (1.35 ** min(level, MAX_SLAVE_LEVEL)))

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def passive_income_task():
    while True:
        await asyncio.sleep(60)
        now = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
        conn = get_db_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("""
                    UPDATE bot_users
                    SET data = jsonb_set(data, '{last_passive}', to_jsonb(NOW()))
                    WHERE (data->>'last_passive')::timestamp < NOW() - INTERVAL '1 minute'
                    RETURNING user_id, data
                """)
                rows = cur.fetchall()
                
                for row in rows:
                    user_id = row[0]
                    user = deserialize_user_data(row[1])
                    
                    if "last_passive" not in user:
                        continue
                        
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
                    mins_passed = (now - user["last_passive"]).total_seconds() / 60
                    mins_passed = min(mins_passed, 1440)  # –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞
                    
                    # –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥
                    base_income = 1 * mins_passed
                    
                    # –î–æ—Ö–æ–¥ –æ—Ç —Å–∫–ª–∞–¥–∞
                    storage_income = user.get("upgrades", {}).get("storage", 0) * 10 * mins_passed
                    
                    # –î–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤ (—Å –Ω–∞–ª–æ–≥–æ–º)
                    slaves_income = 0
                    for slave_id in user.get("slaves", []):
                        slave = get_user(slave_id)
                        if slave:
                            slave_income = 100 * (1 + 0.3 * slave.get("slave_level", 0)) * mins_passed
                            tax_rate = min(0.1 + 0.05 * user.get("slave_level", 0), 0.3)
                            tax = int(slave_income * tax_rate)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–∞–±–∞
                            slave["balance"] += slave_income - tax
                            update_user(slave_id, slave)
                            
                            slaves_income += tax
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    total_income = base_income + storage_income + slaves_income
                    user["balance"] += total_income
                    user["total_income"] += total_income
                    user["last_passive"] = now
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    update_user(user_id, user)
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ passive_income_task: {e}")
        finally:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü–æ–ª—É—á–∞–µ–º referrer_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    referrer_id = None
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î –∏ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if referrer_id == user_id or not get_user(referrer_id):
                referrer_id = None
        except:
            referrer_id = None

    if not await check_subscription(user_id):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if referrer_id:
            user = get_user(user_id) or {}
            user["referrer"] = referrer_id
            update_user(user_id, user)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"{CHECK_SUB}{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return
    
    user = get_user(user_id)
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = create_user(user_id, username, referrer_id)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if referrer_id:
            referrer = get_user(referrer_id)
            if referrer:
                bonus = 50  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å
                referrer["balance"] += bonus
                referrer["total_income"] += bonus
                update_user(referrer_id, referrer)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                
                try:
                    await bot.send_message(
                        referrer_id,
                        f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus}‚ÇΩ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ @{username}!"
                    )
                except:
                    pass

        welcome_msg = (
            "üëë <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –†–ê–ë–û–í–õ–ê–î–ï–õ–¨–ß–ï–°–ö–£–Æ –ò–ú–ü–ï–†–ò–Æ!</b>\n\n"
            "‚ö°Ô∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚ñ∏ üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (—Ä–∞–∑ –≤ 20 –º–∏–Ω)\n"
            "‚ñ∏ üõ† –£–ª—É—á—à–∞–π —Å–≤–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è\n")

@dp.callback_query(F.data == "random_slaves")
async def show_random_slaves(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT user_id, data FROM bot_users")
            all_users = {row[0]: deserialize_user_data(row[1]) for row in cur.fetchall()}
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–∞–±–æ–≤ –∏–ª–∏ —á—É–∂–∏—Ö —Ä–∞–±–æ–≤
            available_slaves = [
                (uid, data) for uid, data in all_users.items() 
                if uid != user_id and (data.get("owner") is None or data["owner"] != user_id)
            ]
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
            def get_slave_score(slave_data):
                level = slave_data.get("slave_level", 0)
                price = slave_data.get("price", 100)
                return (level * 2) - (price / 100)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
            sorted_slaves = sorted(
                available_slaves,
                key=lambda x: get_slave_score(x[1]),
                reverse=True
            )[:10]

            if not sorted_slaves:
                await callback.answer("üò¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ–≤", show_alert=True)
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = []
            for slave_id, slave_data in sorted_slaves:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üë§ –£—Ä.{slave_data.get('slave_level', 0)} @{slave_data['username']} - {slave_data['price']}‚ÇΩ (–†–µ–π—Ç–∏–Ω–≥: {get_slave_score(slave_data):.1f})",
                        callback_data=f"{SLAVE_PREFIX}{slave_id}"
                    )
                ])
            
            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)])
            
            await callback.message.edit_text(
                "üé≤ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±—ã (–¢–æ–ø-10 –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞–±–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ–≤", show_alert=True)
    finally:
        conn.close()
        
@dp.callback_query(F.data.startswith(CHECK_SUB))
async def check_sub_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.replace(CHECK_SUB, ""))
    
    if await check_subscription(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        if not user:
            new_user = {
                "balance": 100,
                "slaves": [],
                "owner": None,
                "price": 100,
                "last_work": None,
                "upgrades": {key: 0 for key in upgrades},
                "total_income": 0,
                "username": callback.from_user.username,
                "last_passive": datetime.now(),
                "income_per_sec": 0.0167,
                "referrer": None
            }
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                create_user(user_id, callback.from_user.username)
                user = get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)
                return
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        referrer_id = user.get("referrer")
        if referrer_id:
            referrer = get_user(referrer_id)
            if referrer:
                bonus = 50
                referrer["balance"] += bonus
                referrer["total_income"] += bonus
                update_user(referrer_id, referrer)
                
                try:
                    await bot.send_message(
                        referrer_id,
                        f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus}‚ÇΩ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ @{callback.from_user.username}!"
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")
        
        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await callback.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    
    await callback.answer()
    
@dp.callback_query(F.data == SEARCH_USER)
async def search_user_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–≥—Ä–æ–∫–∞ (–º–æ–∂–Ω–æ —Å —Å–æ–±–∞–∫–æ–π):\n"
        "–ü—Ä–∏–º–µ—Ä: <code>@username123</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <code>username123</code>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫", callback_data=BUY_MENU)]
            ]
        ),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
    

@dp.callback_query(F.data == WORK)
async def work_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    now = datetime.now()
    cooldown = timedelta(minutes=30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if user.get("last_work"):
        last_work = user["last_work"] if isinstance(user["last_work"], datetime) else datetime.fromisoformat(user["last_work"])
        if (now - last_work) < cooldown:
            remaining = (last_work + cooldown - now).seconds // 60
            await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining} –º–∏–Ω—É—Ç", show_alert=True)
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    if user.get("work_count", 0) >= DAILY_WORK_LIMIT:
        await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç!", show_alert=True)
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
    passive_per_min = 1 + user.get("upgrades", {}).get("storage", 0) * 10
    
    # –î–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤
    for slave_id in user.get("slaves", []):
        slave = get_user(slave_id)
        if slave:
            passive_per_min += 100 * (1 + 0.3 * slave.get("slave_level", 0)) / 60
    
    # –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞
    whip_bonus = 1 + user.get("upgrades", {}).get("whip", 0) * 0.25
    work_bonus = passive_per_min * 10 * (1 + whip_bonus)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user["balance"] += work_bonus
    user["total_income"] += work_bonus
    user["last_work"] = now.isoformat()
    user["work_count"] = user.get("work_count", 0) + 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    update_user(user_id, user)
    
    await callback.message.edit_text(
        f"üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞: {work_bonus:.1f}‚ÇΩ\n"
        f"‚ñ∏ –≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 20 –º–∏–Ω—É—Ç –ø–∞—Å—Å–∏–≤–∫–∏!\n"
        f"‚ñ∏ –í–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Å—Å–∏–≤/–º–∏–Ω: {passive_per_min:.1f}‚ÇΩ",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.message(F.text & ~F.text.startswith('/'))
async def process_username(message: Message):
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username (—É–¥–∞–ª—è–µ–º @ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
    username = message.text.strip().lower().replace('@', '')
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute(
                "SELECT user_id, data FROM bot_users WHERE data->>'username' ILIKE %s",
                (username,)
            )
            result = cur.fetchone()
            
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
            ])

            if not result:
                await message.reply(
                    "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                    "2. –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ",
                    reply_markup=kb
                )
                return

            slave_id, slave_data = result
            slave = deserialize_user_data(slave_data)
            buyer_id = message.from_user.id

            if slave_id == buyer_id:
                await message.reply("üåÄ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=kb)
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
            owner_info = "–°–≤–æ–±–æ–¥–µ–Ω"
            if slave.get('owner'):
                owner = get_user(slave['owner'])
                owner_info = f"@{owner['username']}" if owner else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ {slave['price']}‚ÇΩ (–£—Ä. {slave.get('slave_level', 0)})", 
                        callback_data=f"{SLAVE_PREFIX}{slave_id}"
                    )
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
            ])
            
            await message.reply(
                f"üîé <b>–ù–∞–π–¥–µ–Ω —Ä–∞–±:</b>\n"
                f"‚ñ∏ –ù–∏–∫: @{slave['username']}\n"
                f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave.get('slave_level', 0)}\n"
                f"‚ñ∏ –¶–µ–Ω–∞: {slave['price']}‚ÇΩ\n"
                f"‚ñ∏ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_info}\n\n"
                f"üí° <i>–î–æ—Ö–æ–¥ –æ—Ç —ç—Ç–æ–≥–æ —Ä–∞–±–∞: {int(100 * (1 + 0.5 * slave.get('slave_level', 0)))}‚ÇΩ –∑–∞ —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã</i>",
                reply_markup=kb,
                parse_mode=ParseMode.HTML
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ", reply_markup=kb)
    finally:
        conn.close()

@dp.callback_query(F.data == UPGRADES)
async def upgrades_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    try:
        await callback.message.edit_text(
            "üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ:", 
            reply_markup=upgrades_keyboard(user_id)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ upgrades_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == REF_LINK)
async def ref_link_handler(callback: types.CallbackQuery):
    try:
        bot_username = (await bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start={callback.from_user.id}"
        await callback.message.edit_text(
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
            "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% —Å –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞!",
            reply_markup=main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ ref_link_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == BUY_MENU)
async def buy_menu_handler(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "üë• –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ–≤:", 
            reply_markup=buy_menu_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ buy_menu_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == MAIN_MENU)
async def main_menu_handler(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
            reply_markup=main_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ main_menu_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == TOP_OWNERS)
async def top_owners_handler(callback: types.CallbackQuery):
    try:
        current_user_id = callback.from_user.id
        conn = get_db_connection()
        
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Ä–∞–±–∞–º–∏ –∏ –¥–æ—Ö–æ–¥–æ–º
            cur.execute("""
                SELECT user_id, data->>'username' as username,
                       jsonb_array_length(data->'slaves') as slaves_count,
                       (data->>'total_income')::numeric as total_income
                FROM bot_users
                WHERE jsonb_array_length(data->'slaves') > 0
                ORDER BY (data->>'total_income')::numeric DESC
                LIMIT 10
            """)
            top_users = cur.fetchall()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("""
                SELECT jsonb_array_length(data->'slaves') as slaves_count,
                       (data->>'total_income')::numeric as total_income
                FROM bot_users
                WHERE user_id = %s
            """, (current_user_id,))
            current_user_data = cur.fetchone()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ø–∞
        text = "üèÜ <b>–¢–æ–ø —Ä–∞–±–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n\n"
        text += "<i>–†–µ–π—Ç–∏–Ω–≥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –¥–æ—Ö–æ–¥ –Ω–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–∞</i>\n\n"
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-10
        for idx, user in enumerate(top_users, 1):
            user_id, username, slaves_count, total_income = user
            efficiency = total_income / slaves_count if slaves_count > 0 else 0
            text += (
                f"{idx}. @{username}\n"
                f"   ‚ñ∏ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}‚ÇΩ/—Ä–∞–±\n"
                f"   ‚ñ∏ –†–∞–±–æ–≤: {slaves_count} | –î–æ—Ö–æ–¥: {total_income:.1f}‚ÇΩ\n\n"
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if current_user_data:
            slaves_count, total_income = current_user_data
            efficiency = total_income / slaves_count if slaves_count > 0 else 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–æ–ø–µ
            in_top = any(user[0] == current_user_id for user in top_users)
            if not in_top:
                text += f"\nüìä –í–∞—à–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}‚ÇΩ/—Ä–∞–±"

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
                ]
            ),
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ top_owners_handler: {e}", exc_info=True)
        await callback.answer("üåÄ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞", show_alert=True)
    finally:
        conn.close()
        await callback.answer()

@dp.callback_query(F.data == "shop")
async def shop_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return

    try:
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —â–∏—Ç–∞
        shield_price = calculate_shield_price(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ shield_active
        shield_active = user.get("shield_active")
        if isinstance(shield_active, str):
            try:
                shield_active = datetime.fromisoformat(shield_active)
            except (ValueError, TypeError):
                shield_active = None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —â–∏—Ç–∞
        shield_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if shield_active and shield_active > datetime.now() else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        
        text = [
            "üõí <b>–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫</b>",
            "",
            f"üõ° <b>–©–∏—Ç —Å–≤–æ–±–æ–¥—ã</b> {shield_status}",
            f"‚ñ∏ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ä–∞–±–æ—â–µ–Ω–∏—è –Ω–∞ 12—á",
            f"‚ñ∏ –¶–µ–Ω–∞: {shield_price}‚ÇΩ",
            "",
            "‚õì <b>–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–∞–Ω–¥–∞–ª—ã</b>",
            "‚ñ∏ –£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤—Ä–µ–º—è –≤—ã–∫—É–ø–∞ —Ä–∞–±–∞",
        ]
        
        buttons = [
            [InlineKeyboardButton(
                text=f"üõí –ö—É–ø–∏—Ç—å —â–∏—Ç - {shield_price}‚ÇΩ",
                callback_data=f"{SHIELD_PREFIX}{shield_price}"
            )],
            [InlineKeyboardButton(
                text="‚õì –í—ã–±—Ä–∞—Ç—å —Ä–∞–±–∞ –¥–ª—è –∫–∞–Ω–¥–∞–ª",
                callback_data="select_shackles"
            )],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
        ]
        
        await callback.message.edit_text(
            "\n".join(text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ shop_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data.startswith(UPGRADE_PREFIX))
async def upgrade_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        upgrade_id = callback.data.replace(UPGRADE_PREFIX, "")
        
        user = get_user(user_id)
        if not user:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return

        upgrade_data = upgrades.get(upgrade_id)
        if not upgrade_data:
            await callback.answer("‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        current_level = user.get("upgrades", {}).get(upgrade_id, 0)
        price = upgrade_data["base_price"] * (current_level + 1)
        
        if user.get("balance", 0) < price:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {price}‚ÇΩ", show_alert=True)
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        user["balance"] -= price
        user.setdefault("upgrades", {})[upgrade_id] = current_level + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è —Å–∫–ª–∞–¥–∞
        if upgrade_id == "storage":
            user["income_per_sec"] = (1 + user["upgrades"].get("storage", 0) * 10) / 60

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        update_user(user_id, user)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await callback.message.edit_reply_markup(
                reply_markup=upgrades_keyboard(user_id)
            )
            await callback.answer(f"‚úÖ {upgrade_data['name']} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {current_level + 1}!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            await callback.answer("‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ upgrade_handler: {e}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data.startswith(SHIELD_PREFIX))
async def buy_shield(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    price = int(callback.data.replace(SHIELD_PREFIX, ""))
    
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (user_id,))
            result = cur.fetchone()
            if not result:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
                return
                
            user = deserialize_user_data(result[0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —â–∏—Ç
            current_shield = user.get("shield_active")
            if current_shield and current_shield > datetime.now():
                await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —â–∏—Ç!", show_alert=True)
                return
                
            if user.get("balance", 0) < price:
                await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            user["balance"] -= price
            user["shield_active"] = datetime.now() + timedelta(hours=12)
            user["shop_purchases"] = user.get("shop_purchases", 0) + 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            cur.execute(
                "UPDATE bot_users SET data = %s WHERE user_id = %s",
                (Json(serialize_user_data(user)), user_id)
            )
            conn.commit()
            
            await callback.answer(
                f"üõ° –©–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {user['shield_active'].strftime('%H:%M')}!",
                show_alert=True
            )
            await shop_handler(callback)
            
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —â–∏—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —â–∏—Ç–∞", show_alert=True)
    finally:
        conn.close()

@dp.callback_query(F.data == "select_shackles")
async def select_shackles(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–∞–±–æ–≤
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (user_id,))
            result = cur.fetchone()
            if not result:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
                return
                
            user = deserialize_user_data(result[0])
            
            if not user.get("slaves"):
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ–≤!", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–∞—Ö
            buttons = []
            for slave_id in user["slaves"][:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–µ—Ä–≤—ã—Ö —Ä–∞–±–æ–≤
                cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (slave_id,))
                slave_result = cur.fetchone()
                if slave_result:
                    slave = deserialize_user_data(slave_result[0])
                    price = calculate_shackles_price(slave_id)
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"‚õì @{slave.get('username', 'unknown')} - {price}‚ÇΩ",
                            callback_data=f"{SHACKLES_PREFIX}{slave_id}_{price}"
                        )
                    ])
            
            buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop")])
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∞–ª:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
            await callback.answer()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–¥–∞–ª: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ–≤", show_alert=True)
    finally:
        conn.close()

@dp.callback_query(F.data.startswith(SHACKLES_PREFIX))
async def buy_shackles(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, slave_id, price = callback.data.split("_")
    slave_id = int(slave_id)
    price = int(price)
    
    conn = get_db_connection()
    try:
        conn.autocommit = False
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (user_id,))
            owner_result = cur.fetchone()
            if not owner_result:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
                return
                
            owner = deserialize_user_data(owner_result[0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–∞
            if slave_id not in owner.get("slaves", []):
                await callback.answer("‚ùå –≠—Ç–æ—Ç —Ä–∞–± –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!", show_alert=True)
                return
                
            if owner.get("balance", 0) < price:
                await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (slave_id,))
            slave_result = cur.fetchone()
            slave_username = "unknown"
            if slave_result:
                slave = deserialize_user_data(slave_result[0])
                slave_username = slave.get("username", "unknown")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            owner["balance"] -= price
            if "shackles" not in owner:
                owner["shackles"] = {}
            owner["shackles"][slave_id] = datetime.now() + timedelta(hours=24)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            cur.execute(
                "UPDATE bot_users SET data = %s WHERE user_id = %s",
                (Json(serialize_user_data(owner)), user_id)
            )
            conn.commit()
            
            await callback.answer(
                f"‚õì –ö–∞–Ω–¥–∞–ª—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ @{slave_username} –Ω–∞ 24—á!",
                show_alert=True
            )
            await select_shackles(callback)
            
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–∞–Ω–¥–∞–ª: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–Ω–¥–∞–ª", show_alert=True)
    finally:
        conn.close()

@dp.callback_query(F.data.startswith(SLAVE_PREFIX))
async def buy_slave_handler(callback: types.CallbackQuery):
    buyer_id = callback.from_user.id
    slave_id = int(callback.data.replace(SLAVE_PREFIX, ""))
    
    conn = get_db_connection()
    try:
        conn.autocommit = False
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ —Ä–∞–±–∞
            cur.execute("SELECT data FROM bot_users WHERE user_id IN (%s, %s)", (buyer_id, slave_id))
            results = cur.fetchall()
            
            if len(results) != 2:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
                
            buyer = deserialize_user_data(results[0][0] if results[0][0] == buyer_id else results[1][0])
            slave = deserialize_user_data(results[0][0] if results[0][0] == slave_id else results[1][0])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ (—â–∏—Ç, —Å–∞–º–æ–ø–æ–∫—É–ø–∫–∞, –∏–µ—Ä–∞—Ä—Ö–∏—è –∏ —Ç.–¥.)
            # ... (–æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
            price = slave_price(slave)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            if buyer["balance"] < price * 0.99:
                await callback.answer(f"‚ùå –ù—É–∂–Ω–æ {price}‚ÇΩ (—É –≤–∞—Å {buyer['balance']:.0f}‚ÇΩ", show_alert=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            previous_owner_id = slave.get("owner")
            if previous_owner_id:
                cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (previous_owner_id,))
                prev_owner_result = cur.fetchone()
                if prev_owner_result:
                    prev_owner = deserialize_user_data(prev_owner_result[0])
                    
                    # –£–¥–∞–ª—è–µ–º —Ä–∞–±–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
                    if slave_id in prev_owner.get("slaves", []):
                        prev_owner["slaves"].remove(slave_id)
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é
                    commission = int(price * 0.1)
                    prev_owner["balance"] += commission
                    prev_owner["total_income"] += commission
                    
                    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–¥–∞–ª—ã
                    if slave_id in prev_owner.get("shackles", {}):
                        del prev_owner["shackles"][slave_id]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    cur.execute(
                        "UPDATE bot_users SET data = %s WHERE user_id = %s",
                        (Json(serialize_user_data(prev_owner)), previous_owner_id)
                    )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            buyer["balance"] -= price
            buyer.setdefault("slaves", []).append(slave_id)
            cur.execute(
                "UPDATE bot_users SET data = %s WHERE user_id = %s",
                (Json(serialize_user_data(buyer)), buyer_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–∞
            slave["owner"] = buyer_id
            slave["slave_level"] = min(slave.get("slave_level", 0) + 1, MAX_SLAVE_LEVEL)
            slave["price"] = slave_price(slave)
            slave["enslaved_date"] = datetime.now().isoformat()
            cur.execute(
                "UPDATE bot_users SET data = %s WHERE user_id = %s",
                (Json(serialize_user_data(slave)), slave_id))
            
            conn.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            msg = [
                f"‚úÖ –ö—É–ø–ª–µ–Ω @{slave.get('username', '–±–µ–∑—ã–º—è–Ω–Ω—ã–π')} –∑–∞ {price}‚ÇΩ",
                f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave['slave_level']}",
                f"‚ñ∏ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {slave['price']}‚ÇΩ",
                f"‚ñ∏ –î–æ—Ö–æ–¥/—á–∞—Å: {100 * (1 + 0.3 * slave['slave_level'])}‚ÇΩ"
            ]
            
            if previous_owner_id:
                msg.append(f"‚ñ∏ –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {commission}‚ÇΩ")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–∞
            try:
                await bot.send_message(
                    slave_id,
                    f"‚ö° –í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω—ã @{buyer.get('username', 'unknown')} "
                    f"–∑–∞ {price}‚ÇΩ (—É—Ä–æ–≤–µ–Ω—å {slave['slave_level']})"
                )
            except Exception:
                pass
            
            await callback.message.edit_text("\n".join(msg), reply_markup=main_keyboard())
            await callback.answer()
            
    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ä–∞–±–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ä–∞–±–∞", show_alert=True)
    finally:
        conn.close()

@dp.callback_query(F.data.startswith(BUYOUT_PREFIX))
async def buyout_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    buyout_price = int(callback.data.replace(BUYOUT_PREFIX, ""))
    
    conn = get_db_connection()
    try:
        conn.autocommit = False
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (user_id,))
            user_result = cur.fetchone()
            if not user_result:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
                return
                
            user = deserialize_user_data(user_result[0])
            
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not user.get("owner"):
                await callback.answer("‚ùå –í—ã –∏ —Ç–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã!", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            owner_id = user["owner"]
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (owner_id,))
            owner_result = cur.fetchone()
            owner = deserialize_user_data(owner_result[0]) if owner_result else None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∞–ª–æ–≤
            if owner and user_id in owner.get("shackles", {}):
                shackles_end = owner["shackles"][user_id].strftime("%d.%m %H:%M")
                await callback.answer(
                    f"‚õì –í—ã –≤ –∫–∞–Ω–¥–∞–ª–∞—Ö –¥–æ {shackles_end}!\n–í—ã–∫—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω",
                    show_alert=True
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            if user["balance"] < buyout_price * 0.99:
                await callback.answer(
                    f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {buyout_price - user['balance']:.0f}‚ÇΩ\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {buyout_price}‚ÇΩ",
                    show_alert=True
                )
                return

            # –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–∫—É–ø–∞
            base_price = user.get("base_price", 100)
            slave_level = user.get("slave_level", 0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user["balance"] -= buyout_price
            user["owner"] = None
            user["price"] = base_price
            user["total_spent"] = user.get("total_spent", 0) + buyout_price
            user["buyout_count"] = user.get("buyout_count", 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if owner:
                owner_income = int(buyout_price * 0.6)
                owner["balance"] += owner_income
                owner["total_income"] += owner_income
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ–≤
                if "slaves" in owner and user_id in owner["slaves"]:
                    owner["slaves"].remove(user_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                cur.execute(
                    "UPDATE bot_users SET data = %s WHERE user_id = %s",
                    (Json(serialize_user_data(owner)), owner_id)
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute(
                "UPDATE bot_users SET data = %s WHERE user_id = %s",
                (Json(serialize_user_data(user)), user_id)
            )
            
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if owner:
                try:
                    await bot.send_message(
                        owner_id,
                        f"üîì –†–∞–± @{user.get('username', 'unknown')} "
                        f"–≤—ã–∫—É–ø–∏–ª—Å—è –∑–∞ {buyout_price}‚ÇΩ\n"
                        f"–í–∞—à –¥–æ—Ö–æ–¥: {owner_income}‚ÇΩ"
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {e}")

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await callback.message.edit_text(
                f"üéâ <b>–í—ã —Å–≤–æ–±–æ–¥–Ω—ã!</b>\n"
                f"‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {buyout_price}‚ÇΩ\n"
                f"‚ñ∏ –°–æ—Ö—Ä–∞–Ω—ë–Ω —É—Ä–æ–≤–µ–Ω—å: {slave_level}\n"
                f"‚ñ∏ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price}‚ÇΩ\n\n"
                f"<i>–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –ø–ª–∞—Ç–∏—Ç–µ 30% –Ω–∞–ª–æ–≥ –≤–ª–∞–¥–µ–ª—å—Ü—É</i>",
                reply_markup=main_keyboard(),
                parse_mode=ParseMode.HTML
            )
            await callback.answer()

    except Exception as e:
        conn.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–∫—É–ø–∞: {e}", exc_info=True)
        await callback.answer("üåÄ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫—É–ø–µ", show_alert=True)
    finally:
        conn.close()

@dp.callback_query(F.data == PROFILE)
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (user_id,))
            user_result = cur.fetchone()
            if not user_result:
                await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
                return
                
            user = deserialize_user_data(user_result[0])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤—ã–∫—É–ø–∞
            buyout_price = 0
            if user.get("owner"):
                base_price = user.get("base_price", 100)
                buyout_price = int((base_price + user["balance"] * 0.1) * (1 + user.get("slave_level", 0) * 0.5))
                buyout_price = max(100, min(10000, buyout_price))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            owner_username = None
            if user.get("owner"):
                cur.execute(
                    "SELECT data->>'username' FROM bot_users WHERE user_id = %s",
                    (user["owner"],)
                )
                owner_result = cur.fetchone()
                owner_username = owner_result[0] if owner_result else "unknown"
            
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ —É–ª—É—á—à–µ–Ω–∏–π
            barracks_level = user.get("upgrades", {}).get("barracks", 0)
            whip_level = user.get("upgrades", {}).get("whip", 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
            text = [
                f"üëë <b>–ü—Ä–æ—Ñ–∏–ª—å @{user.get('username', 'unknown')}</b>",
                f"‚ñ∏ üí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0):.1f}‚ÇΩ",
                f"‚ñ∏ üë• –£—Ä–æ–≤–µ–Ω—å —Ä–∞–±–∞: {user.get('slave_level', 0)}",
                f"‚ñ∏ üõ† –£–ª—É—á—à–µ–Ω–∏—è: {sum(user.get('upgrades', {}).values())}",
                f"‚ñ∏ –õ–∏–º–∏—Ç —Ä–∞–±–æ–≤: {5 + 2 * barracks_level} (–º–∞–∫—Å. {5 + 2 * MAX_BARRACKS_LEVEL})",
                f"‚ñ∏ –ù–∞–ª–æ–≥: {10 + 2 * whip_level}%"
            ]
            
            if user.get("owner"):
                text.append(
                    f"\n‚ö†Ô∏è <b>–ù–∞–ª–æ–≥ —Ä–∞–±—Å—Ç–≤–∞:</b> 30% –¥–æ—Ö–æ–¥–∞ ‚Üí @{owner_username}\n"
                    f"‚ñ∏ –¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: {buyout_price}‚ÇΩ"
                )
            else:
                text.append("\nüîó –í—ã —Å–≤–æ–±–æ–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫")
                
            # –ö–Ω–æ–ø–∫–∞ –≤—ã–∫—É–ø–∞
            keyboard = []
            if user.get("owner"):
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üÜì –í—ã–∫—É–ø–∏—Ç—å—Å—è –∑–∞ {buyout_price}‚ÇΩ",
                        callback_data=f"{BUYOUT_PREFIX}{buyout_price}"
                    )
                ])
            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
            
            await callback.message.edit_text(
                "\n".join(text),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode=ParseMode.HTML
            )
            await callback.answer()
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)
    finally:
        conn.close()

async def autosave_task():
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        # –í PostgreSQL –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–∫—Å–∏—Ä—É—é—Ç—Å—è —Å—Ä–∞–∑—É
        logging.info("Autosave check completed")

async def on_startup():
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        conn = get_db_connection()
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS bot_users (
                    user_id BIGINT PRIMARY KEY,
                    data JSONB NOT NULL,
                    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            cur.execute("""
                CREATE INDEX IF NOT EXISTS idx_bot_users_username 
                ON bot_users ((data->>'username'))
            """)
            cur.execute("""
                CREATE INDEX IF NOT EXISTS idx_bot_users_owner 
                ON bot_users ((data->>'owner'))
            """)
            cur.execute("""
                CREATE INDEX IF NOT EXISTS idx_bot_users_slaves 
                ON bot_users USING GIN ((data->'slaves'))
            """)
            conn.commit()
        logging.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã!")
    except Exception as e:
        logging.critical(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL: {e}")
        raise
    finally:
        conn.close()

async def on_shutdown():
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    # –í PostgreSQL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —è–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
