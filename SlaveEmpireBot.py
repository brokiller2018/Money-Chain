import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPGRADE_PREFIX = "upg_"
SLAVE_PREFIX = "slv_"
MAIN_MENU = "main_menu"
WORK = "work"
UPGRADES = "upgrades"
PROFILE = "profile"
REF_LINK = "ref_link"
BUY_MENU = "buy_menu"
CHECK_SUB = "check_sub_"
SEARCH_USER = "search_user"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users = {}
user_search_cache = {}

# –£–ª—É—á—à–µ–Ω–∏—è —Å –≤–∞—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ + –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
upgrades = {
    "storage": {
        "name": "üì¶ –°–∫–ª–∞–¥",
        "base_price": 500,
        "income_bonus": 10,
        "description": "+10 –º–æ–Ω–µ—Ç/–º–∏–Ω –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É"
    },
    "whip": {
        "name": "‚õì –ö–Ω—É—Ç—ã", 
        "base_price": 1000,
        "income_bonus": 25,
        "description": "+25% –∫ –¥–æ—Ö–æ–¥—É –æ—Ç —Ä–∞–±–æ–≤"
    },
    "food": {
        "name": "üçó –ï–¥–∞",
        "base_price": 2000,
        "income_bonus": 50,
        "description": "-10% –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"
    },
    "barracks": {
        "name": "üè† –ë–∞—Ä–∞–∫–∏",
        "base_price": 5000,
        "income_bonus": 100,
        "description": "+5 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É –∫–æ–¥—É —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–∏—Å–∫–∞)
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data=WORK)],
        [InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data=UPGRADES),
         InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE)],
        [InlineKeyboardButton(text="üë• –ö—É–ø–∏—Ç—å —Ä–∞–±–∞", callback_data=BUY_MENU)],
        [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data=REF_LINK)]
    ])

def buy_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data=SEARCH_USER)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"{CHECK_SUB}{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return
    
    if user_id not in users:
        users[user_id] = {
            "balance": 100,
            "slaves": [],
            "owner": None,
            "price": 100,
            "last_work": None,
            "upgrades": {key: 0 for key in upgrades},
            "total_income": 0,
            "username": message.from_user.username,
            "last_passive": datetime.now(),
            "income_per_min": 1  # –ë–∞–∑–æ–≤—ã–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
        }
        
        guide = """üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Slave Empire!</b>

üí∞ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:</b>
1. –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: –ø–æ–ª—É—á–∞–µ—Ç–µ –º–æ–Ω–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
2. /work - –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ (20 –º–∏–Ω –∫–¥)
3. –£–ª—É—á—à–µ–Ω–∏—è: —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –¥–æ—Ö–æ–¥
4. –†–∞–±—ã: –∫—É–ø–∏—Ç–µ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–∏–±—ã–ª–∏

üìä <b>–î–æ—Ö–æ–¥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è:</b>
‚Ä¢ –†–∞–±–æ—Ç–∞: 50 + –±–æ–Ω—É—Å—ã
‚Ä¢ –ü–∞—Å—Å–∏–≤–∫–∞: 1/–º–∏–Ω + –±–æ–Ω—É—Å—ã
‚Ä¢ –†–∞–±—ã: 100/—Ä–∞–± + –±–æ–Ω—É—Å—ã

üõ† <b>–£–ª—É—á—à–µ–Ω–∏—è:</b>
‚Ä¢ üì¶ –°–∫–ª–∞–¥: +10/–º–∏–Ω –∑–∞ —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ ‚õì –ö–Ω—É—Ç—ã: +25% –∫ —Ä–∞–±–∞–º
‚Ä¢ üçó –ï–¥–∞: -10% –∫ –∫–¥ —Ä–∞–±–æ—Ç—ã
‚Ä¢ üè† –ë–∞—Ä–∞–∫–∏: +5 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤"""
        
        await message.answer(guide, reply_markup=main_keyboard())
    else:
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

# –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
async def passive_income():
    while True:
        await asyncio.sleep(60)
        now = datetime.now()
        for user_id, user_data in users.items():
            if "last_passive" in user_data:
                mins_passed = (now - user_data["last_passive"]).total_seconds() / 60
                if mins_passed >= 1:
                    # –ë–∞–∑–æ–≤—ã–π 1/–º–∏–Ω + 10/–º–∏–Ω –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∫–ª–∞–¥–∞
                    income = (1 + user_data["upgrades"]["storage"] * 10) * mins_passed
                    user_data["balance"] += income
                    user_data["last_passive"] = now
                    user_data["income_per_min"] = income / mins_passed
                    
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚è≥ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: +{income:.2f} –º–æ–Ω–µ—Ç"
                        )
                    except:
                        pass

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(F.data == PROFILE)
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    slaves_list = "\n".join([
        f"  ‚ñ™Ô∏è @{users[uid]['username']}" 
        for uid in user["slaves"][:3]
    ])
    if len(user["slaves"]) > 3:
        slaves_list += f"\n  ...–∏ –µ—â—ë {len(user['slaves']) - 3}"
    
    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å @{user['username']}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']:.2f} –º–æ–Ω–µ—Ç\n"
        f"‚è≥ –î–æ—Ö–æ–¥: {user['income_per_min']/60:.2f} –º–æ–Ω–µ—Ç/—Å–µ–∫\n"
        f"üß∑ –†–∞–±—ã: {len(user['slaves'])}\n{slaves_list}\n"
        f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: @{users[user['owner']]['username'] if user['owner'] else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_income']}"
    )
    
    await callback.message.edit_text(profile_text, reply_markup=main_keyboard())
    await callback.answer()

# –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
@dp.callback_query(F.data == SEARCH_USER)
async def search_user_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–≥—Ä–æ–∫–∞ –±–µ–∑ —Å–æ–±–∞—á–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
        ])
    )
    await callback.answer()

@dp.message(F.text & ~F.text.startswith('/') & ~F.text.startswith('@'))
async def process_username(message: Message):
    username = message.text.lower().strip()
    buyer_id = message.from_user.id
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    found = None
    for uid, data in users.items():
        if data["username"] and data["username"].lower() == username:
            found = uid
            break
    
    if not found:
        return await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if found == buyer_id:
        return await message.reply("ü§° –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
    
    slave = users[found]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ {slave['price']} –º–æ–Ω–µ—Ç",
            callback_data=f"{SLAVE_PREFIX}{found}"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])
    
    await message.reply(
        f"üîé –ù–∞–π–¥–µ–Ω: @{slave['username']}\n"
        f"üíµ –¶–µ–Ω–∞: {slave['price']} –º–æ–Ω–µ—Ç\n"
        f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: @{users[slave['owner']]['username'] if slave['owner'] else '–°–≤–æ–±–æ–¥–µ–Ω'}",
        reply_markup=kb
    )

# –ó–∞–ø—É—Å–∫ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
async def on_startup():
    asyncio.create_task(passive_income())

async def main():
    await on_startup()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
