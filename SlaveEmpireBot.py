import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
users = {}

async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
        ])
        await message.answer(
            "üìõ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
            reply_markup=kb
        )
        return

    referrer_id = message.text.split()[1] if len(message.text.split()) > 1 else None
    if user_id not in users:
        users[user_id] = {"balance": 100, "slaves": [], "owner": None, "price": 100}
        
        if referrer_id and referrer_id.isdigit():
            referrer_id = int(referrer_id)
            if referrer_id in users and referrer_id != user_id:
                users[referrer_id]['slaves'].append(user_id)
                users[user_id]['owner'] = referrer_id
                users[referrer_id]['balance'] += 50
                await message.answer(
                    f"üéâ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –≤ –ø–æ–¥—á–∏–Ω–µ–Ω–∏–∏ —É {referrer_id}, –æ–Ω –ø–æ–ª—É—á–∏–ª 50 –º–æ–Ω–µ—Ç."
                )
                return
        
        await message.answer("üÜï –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Slave Empire!")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

@dp.callback_query(F.data == "check_sub")
async def check_subscription_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if await check_subscription(user_id):
        if user_id not in users:
            users[user_id] = {"balance": 100, "slaves": [], "owner": None, "price": 100}
            await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–µ –æ—Ç–∫—Ä—ã—Ç.")
        else:
            await callback.message.edit_text("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await callback.answer("‚ùå –í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    await callback.answer()

@dp.message(Command('profile'))
async def profile_command(message: Message):
    user_id = message.from_user.id
    if user_id in users:
        profile_info = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {users[user_id]['balance']} –º–æ–Ω–µ—Ç\n"
            f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: {users[user_id]['owner'] or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"üßé –í–∞—à–∏ —Ä–∞–±—ã: {len(users[user_id]['slaves'])} —á–µ–ª.\n"
            f"üß∑ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(users[user_id]['slaves'])}\n"
            f"üè∑Ô∏è –í–∞—à–∞ —Ü–µ–Ω–∞: {users[user_id]['price']} –º–æ–Ω–µ—Ç"
        )
        await message.answer(profile_info)
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")

@dp.message(Command('work'))
async def work_command(message: Message):
    user_id = message.from_user.id
    if user_id in users:
        income = 10 + len(users[user_id]['slaves']) * 5
        users[user_id]['balance'] += income
        await message.answer(f"üíº –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {income} –º–æ–Ω–µ—Ç!")
    else:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")

@dp.message(Command('buy'))
async def buy_command(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")
        return
    
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy @username")
        return
    
    try:
        slave_id = int(args[1].replace('@', ''))
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    if slave_id not in users:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if user_id == slave_id:
        await message.answer("ü§¶ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è!")
        return
    
    slave_price = users[slave_id]['price']
    if users[user_id]['balance'] < slave_price:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ: {slave_price}")
        return
    
    old_owner = users[slave_id]['owner']
    if old_owner:
        users[old_owner]['balance'] += slave_price
        users[old_owner]['slaves'].remove(slave_id)
    
    users[user_id]['balance'] -= slave_price
    users[user_id]['slaves'].append(slave_id)
    users[slave_id]['owner'] = user_id
    users[slave_id]['price'] = int(slave_price * 1.5)
    
    await message.answer(
        f"üéâ –í—ã –∫—É–ø–∏–ª–∏ –∏–≥—Ä–æ–∫–∞ {slave_id} –∑–∞ {slave_price} –º–æ–Ω–µ—Ç!\n"
        f"–¢–µ–ø–µ—Ä—å –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {users[slave_id]['price']} –º–æ–Ω–µ—Ç"
    )
@dp.message(Command('ref'))
async def ref_command(message: Message):
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    
    await message.answer(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        f"üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ:\n"
        f"- –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +50 –º–æ–Ω–µ—Ç\n"
        f"- –û–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º —Ä–∞–±–æ–º\n"
        f"- –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤–∞—à –¥–æ—Ö–æ–¥ –æ—Ç /work",
        parse_mode=ParseMode.HTML
    )
@dp.message()
async def handle_unknown(message: Message):
    await message.answer(
        "ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/work - –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
        "/buy @username - –ö—É–ø–∏—Ç—å –∏–≥—Ä–æ–∫–∞"
    )

async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
