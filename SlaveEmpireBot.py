# commands.py (Part 1/5)
import logging
import asyncio
import os
from datetime import datetime, timedelta
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPGRADE_PREFIX = "upg_"
SLAVE_PREFIX = "slv_"
MAIN_MENU = "main_menu"
WORK = "work"
UPGRADES = "upgrades"
PROFILE = "profile"
REF_LINK = "ref_link"
BUY_MENU = "buy_menu"
CHECK_SUB = "check_sub_"
SEARCH_USER = "search_user"
TOP_OWNERS = "top_owners"
BUYOUT_PREFIX = "buyout_"
SHIELD_PREFIX = "shield_"
SHACKLES_PREFIX = "shackles_"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –£–ª—É—á—à–µ–Ω–∏—è (–ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å)
upgrades = {
    "storage": {
        "name": "üì¶ –°–∫–ª–∞–¥",
        "base_price": 300,
        "income_bonus": 5,
        "description": "+5 –º–æ–Ω–µ—Ç/–º–∏–Ω –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É",
        "multiplier": 1.4
    },
    "whip": {
        "name": "‚õì –ö–Ω—É—Ç—ã", 
        "base_price": 800,
        "income_bonus": 20,
        "description": "+20% –∫ –¥–æ—Ö–æ–¥—É –æ—Ç —Ä–∞–±–æ—Ç—ã",
        "multiplier": 1.5
    },
    "food": {
        "name": "üçó –ï–¥–∞",
        "base_price": 1500,
        "income_bonus": 30,
        "description": "-15% –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã",
        "multiplier": 1.6
    },
    "barracks": {
        "name": "üè† –ë–∞—Ä–∞–∫–∏",
        "base_price": 4000,
        "income_bonus": 50,
        "description": "+3 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤",
        "multiplier": 2.0
    }
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
async def get_db():
    return await asyncpg.connect(os.getenv("DATABASE_URL"))

# –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
def serialize_user_data(user_data: dict) -> dict:
    return {
        k: v.isoformat() if isinstance(v, datetime) else v
        for k, v in user_data.items()
    }

def deserialize_user_data(data: dict) -> dict:
    return {
        k: datetime.fromisoformat(v) if k in ['last_passive', 'last_work'] and v else v
        for k, v in data.items()
    }

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
async def get_user(user_id: int) -> dict:
    async with await get_db() as conn:
        data = await conn.fetchval(
            "SELECT data FROM bot_users WHERE user_id = $1", 
            user_id
        )
        return deserialize_user_data(data) if data else None

async def update_user(user_id: int, data: dict):
    async with await get_db() as conn:
        await conn.execute(
            "INSERT INTO bot_users (user_id, data) VALUES ($1, $2) "
            "ON CONFLICT (user_id) DO UPDATE SET data = $2, last_updated = NOW()",
            user_id, 
            serialize_user_data(data)
        )

async def init_db():
    async with await get_db() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS bot_users (
                user_id BIGINT PRIMARY KEY,
                data JSONB NOT NULL,
                last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)
        # commands.py (Part 2/5)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data=WORK)],
        [
            InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data=UPGRADES),
            InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE)
        ],
        [
            InlineKeyboardButton(text="üë• –ö—É–ø–∏—Ç—å —Ä–∞–±–∞", callback_data=BUY_MENU),
            InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
        ],
        [    
            InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data=REF_LINK),
            InlineKeyboardButton(text="üèÜ –¢–æ–ø –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤", callback_data=TOP_OWNERS)
        ]
    ])

async def upgrades_keyboard(user_id: int):
    user = await get_user(user_id)
    buttons = []
    for upgrade_id, data in upgrades.items():
        level = user.get("upgrades", {}).get(upgrade_id, 0)
        price = int(data["base_price"] * (data["multiplier"] ** level))
        buttons.append([
            InlineKeyboardButton(
                text=f"{data['name']} (–£—Ä. {level}) - {price}‚ÇΩ | {data['description']}",
                callback_data=f"{UPGRADE_PREFIX}{upgrade_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def buy_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data=SEARCH_USER)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"{CHECK_SUB}{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return

    user = await get_user(user_id)
    if not user:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = {
            "balance": 150,  # –£–≤–µ–ª–∏—á–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            "slaves": [],
            "owner": None,
            "base_price": 150,
            "enslaved_date": None,
            "slave_level": 0,
            "price": 150,
            "last_work": None,
            "upgrades": {key: 0 for key in upgrades},
            "total_income": 0,
            "username": username,
            "shield_active": None,
            "shackles": {},
            "shop_purchases": 0,
            "last_passive": datetime.now(),
            "referrer": None
        }
        await update_user(user_id, new_user)
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        if len(message.text.split()) > 1:
            try:
                referrer_id = int(message.text.split()[1])
                if referrer_id != user_id and await get_user(referrer_id):
                    new_user["referrer"] = referrer_id
                    referrer = await get_user(referrer_id)
                    referrer["balance"] += 75  # –£–≤–µ–ª–∏—á–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
                    await update_user(referrer_id, referrer)
            except: pass

        welcome_msg = (
            "üëë <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –†–ê–ë–û–í–õ–ê–î–ï–õ–¨–ß–ï–°–ö–£–Æ –ò–ú–ü–ï–†–ò–Æ!</b>\n\n"
            "‚ö°Ô∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚ñ∏ üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (—Ä–∞–∑ –≤ 15 –º–∏–Ω)\n"  # –£–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            "‚ñ∏ üõ† –£–ª—É—á—à–∞–π —Å–≤–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è\n"
            "‚ñ∏ üë• –ü–æ–∫—É–ø–∞–π —Ä–∞–±–æ–≤ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n"
            "‚ñ∏ üìà –ü–æ–ª—É—á–∞–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n\n"
            "üí∞ <b>–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> 150‚ÇΩ"
        )
        await message.answer(welcome_msg, reply_markup=main_keyboard())
    else:
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@dp.callback_query(F.data.startswith(CHECK_SUB))
async def check_sub_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.replace(CHECK_SUB, ""))
    if await check_subscription(user_id):
        user = await get_user(user_id) or {}
        if not user:
            new_user = {
                "balance": 150,
                "slaves": [],
                "owner": None,
                "base_price": 150,
                "enslaved_date": None,
                "slave_level": 0,
                "price": 150,
                "last_work": None,
                "upgrades": {
                    "storage": 0,
                    "whip": 0,
                    "food": 0,
                    "barracks": 0
                },
                "total_income": 0,
                "username": callback.from_user.username,
                "shield_active": None,
                "shackles": {},
                "shop_purchases": 0,
                "last_passive": datetime.now(),
                "referrer": None
            }
            await update_user(user_id, new_user)
        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await callback.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

@dp.callback_query(F.data == WORK)
async def work_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    # –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: —É–º–µ–Ω—å—à–µ–Ω–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –¥–æ 15 –º–∏–Ω—É—Ç
    cooldown = timedelta(minutes=15)
    if user["last_work"] and (datetime.now() - user["last_work"]) < cooldown:
        remaining = (user["last_work"] + cooldown - datetime.now()).seconds // 60
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining} –º–∏–Ω—É—Ç", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
    passive_per_min = 1 + user.get("upgrades", {}).get("storage", 0) * 5
    for slave_id in user.get("slaves", []):
        slave = await get_user(slave_id)
        if slave:
            passive_per_min += 80 * (1 + 0.25 * slave.get("slave_level", 0))  # –£–º–µ–Ω—å—à–µ–Ω –¥–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤
    
    work_bonus = passive_per_min * 15 * (1 + user.get("upgrades", {}).get("whip", 0) * 0.2)
    user["balance"] += work_bonus
    user["total_income"] += work_bonus
    user["last_work"] = datetime.now()
    
    await update_user(user_id, user)
    await callback.message.edit_text(
        f"üíº –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: {work_bonus:.1f}‚ÇΩ\n"
        f"‚ñ∏ –¢–µ–∫—É—â–∏–π –ø–∞—Å—Å–∏–≤/–º–∏–Ω: {passive_per_min:.1f}‚ÇΩ",
        reply_markup=main_keyboard()
    )
    # commands.py (Part 3/5)
@dp.callback_query(F.data == SEARCH_USER)
async def search_user_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–≥—Ä–æ–∫–∞ (–º–æ–∂–Ω–æ –±–µ–∑ @):\n"
        "–ü—Ä–∏–º–µ—Ä: <code>username123</code>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]]
        ),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.message(F.text & ~F.text.startswith('/'))
async def process_username(message: Message):
    username = message.text.strip().lower().replace('@', '')
    
    # –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    found_user_id = None
    async with await get_db() as conn:
        users = await conn.fetch("SELECT user_id, data FROM bot_users")
        for record in users:
            user_data = deserialize_user_data(record['data'])
            if user_data.get('username', '').lower() == username:
                found_user_id = record['user_id']
                break

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])

    if not found_user_id:
        await message.reply("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=kb)
        return

    buyer_id = message.from_user.id
    if found_user_id == buyer_id:
        await message.reply("üåÄ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=kb)
        return

    slave = await get_user(found_user_id)
    owner_info = ""
    if slave.get('owner'):
        owner = await get_user(slave['owner'])
        owner_info = f"@{owner['username']}" if owner else "–°–∏—Å—Ç–µ–º–∞"

    price = slave['price']
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ {price}‚ÇΩ (–£—Ä. {slave['slave_level']})",
            callback_data=f"{SLAVE_PREFIX}{found_user_id}"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])

    await message.reply(
        f"üîé <b>–ù–∞–π–¥–µ–Ω —Ä–∞–±:</b>\n"
        f"‚ñ∏ –ù–∏–∫: @{slave['username']}\n"
        f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave['slave_level']}\n"
        f"‚ñ∏ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
        f"‚ñ∏ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_info}\n\n"
        f"üí° –î–æ—Ö–æ–¥: {80 * (1 + 0.25 * slave['slave_level'])}‚ÇΩ/—Ü–∏–∫–ª",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(F.data.startswith(SLAVE_PREFIX))
async def buy_slave_handler(callback: types.CallbackQuery):
    try:
        buyer_id = callback.from_user.id
        slave_id = int(callback.data.replace(SLAVE_PREFIX, ""))
        
        # –ê—Ç–æ–º–∞—Ä–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        async with await get_db() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            buyer = await get_user(buyer_id)
            slave = await get_user(slave_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —â–∏—Ç–∞
            if slave.get('shield_active') and slave['shield_active'] > datetime.now():
                shield_time = slave['shield_active'].strftime("%d.%m %H:%M")
                await callback.answer(f"üõ° –ó–∞—â–∏—Ç–∞ –¥–æ {shield_time}!", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
            price = slave['price']
            if buyer['balance'] < price:
                await callback.answer(f"‚ùå –ù—É–∂–Ω–æ {price}‚ÇΩ!", show_alert=True)
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            buyer['balance'] -= price
            buyer['slaves'].append(slave_id)
            slave['owner'] = buyer_id
            slave['slave_level'] = min(slave['slave_level'] + 1, 10)
            slave['price'] = int(slave['base_price'] * (1.5 ** slave['slave_level']))

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            await update_user(buyer_id, buyer)
            await update_user(slave_id, slave)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–∞
            try:
                await bot.send_message(
                    slave_id,
                    f"‚ö° –í–∞—Å –∫—É–ø–∏–ª @{buyer['username']} –∑–∞ {price}‚ÇΩ"
                )
            except Exception as e:
                logging.error(f"Notification error: {e}")

            await callback.message.edit_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ @{slave['username']}!\n"
                f"‚ñ∏ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {slave['slave_level']}\n"
                f"‚ñ∏ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {slave['price']}‚ÇΩ",
                reply_markup=main_keyboard()
            )

    except Exception as e:
        logging.error(f"Buy slave error: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!", show_alert=True)

@dp.callback_query(F.data.startswith(BUYOUT_PREFIX))
async def buyout_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = await get_user(user_id)
        
        if not user.get('owner'):
            await callback.answer("üéâ –í—ã —É–∂–µ —Å–≤–æ–±–æ–¥–Ω—ã!", show_alert=True)
            return

        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –≤—ã–∫—É–ø–∞
        base_price = user['base_price']
        buyout_price = int(
            (base_price + user['balance'] * 0.15) *  # 15% –æ—Ç –±–∞–ª–∞–Ω—Å–∞
            (1 + user['slave_level'] * 0.35)        # 35% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        )
        buyout_price = max(200, min(25000, buyout_price))  # –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã

        async with await get_db() as conn:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            user['balance'] -= buyout_price
            user['owner'] = None
            owner = await get_user(user['owner'])

            if owner:
                owner['slaves'].remove(user_id)
                owner['balance'] += int(buyout_price * 0.65)  # 65% –≤–ª–∞–¥–µ–ª—å—Ü—É
                await update_user(user['owner'], owner)

            await update_user(user_id, user)

            await callback.message.edit_text(
                f"üéâ –°–≤–æ–±–æ–¥–∞ –∑–∞ {buyout_price}‚ÇΩ!\n"
                f"‚ñ∏ –°–æ—Ö—Ä–∞–Ω—ë–Ω —É—Ä–æ–≤–µ–Ω—å: {user['slave_level']}\n"
                f"‚ñ∏ –ù–æ–≤—ã–π –ª–∏–º–∏—Ç —Ä–∞–±–æ–≤: {3 + user.get('upgrades', {}).get('barracks', 0) * 3}",
                reply_markup=main_keyboard()
            )

    except Exception as e:
        logging.error(f"Buyout error: {e}", exc_info=True)
        await callback.answer("üåÄ –û—à–∏–±–∫–∞ –≤—ã–∫—É–ø–∞", show_alert=True)
        # commands.py (Part 4/5)
async def calculate_shield_price(user_id: int) -> int:
    user = await get_user(user_id)
    if not user:
        return 0
    
    # –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: 6 —á–∞—Å–æ–≤ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    passive_income = 1 + user.get("upgrades", {}).get("storage", 0) * 5  # –°–∫–ª–∞–¥
    for slave_id in user.get("slaves", []):
        slave = await get_user(slave_id)
        if slave:
            passive_income += 80 * (1 + 0.25 * slave.get("slave_level", 0))
    
    price = int(passive_income * 60 * 6)  # 6 —á–∞—Å–æ–≤ –≤ –º–∏–Ω—É—Ç–∞—Ö
    price = max(500, min(15000, price))   # –õ–∏–º–∏—Ç—ã —Ü–µ–Ω—ã
    
    # –°–∫–∏–¥–∫–∞ 25% –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–∫—É–ø–æ–∫
    if user.get("shop_purchases", 0) < 3:
        price = int(price * 0.75)
    
    return (price // 100) * 100  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Å–æ—Ç–µ–Ω

async def calculate_shackles_price(slave_id: int) -> int:
    slave = await get_user(slave_id)
    if not slave:
        return 0
    
    # –§–æ—Ä–º—É–ª–∞: 200% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–∞
    price = int(slave["price"] * 2.0)
    return max(1000, min(30000, price))

@dp.callback_query(F.data == "shop")
async def shop_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    
    shield_price = await calculate_shield_price(user_id)
    shield_status = (
        "üü¢ –î–æ %s" % user["shield_active"].strftime("%d.%m %H:%M") 
        if user.get("shield_active") and user["shield_active"] > datetime.now()
        else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    )
    
    text = [
        "üõí <b>–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫</b>",
        "",
        f"üõ° <b>–©–∏—Ç —Å–≤–æ–±–æ–¥—ã</b> ({shield_status})",
        f"‚ñ∏ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–∫—É–ø–∫–∏ –Ω–∞ 24 —á–∞—Å–∞",
        f"‚ñ∏ –¶–µ–Ω–∞: {shield_price}‚ÇΩ",
        "",
        "‚õì <b>–ê–¥—Å–∫–∏–µ –∫–∞–Ω–¥–∞–ª—ã</b>",
        "‚ñ∏ –ë–ª–æ–∫–∏—Ä—É—é—Ç –≤—ã–∫—É–ø —Ä–∞–±–∞ –Ω–∞ 48 —á–∞—Å–æ–≤",
        "‚ñ∏ –¶–µ–Ω–∞: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–∞"
    ]
    
    buttons = [
        [InlineKeyboardButton(
            text=f"üõ° –ö—É–ø–∏—Ç—å —â–∏—Ç ‚Äî {shield_price}‚ÇΩ",
            callback_data=f"{SHIELD_PREFIX}{shield_price}"
        )],
        [InlineKeyboardButton(
            text="‚õì –í—ã–±—Ä–∞—Ç—å —Ä–∞–±–∞ –¥–ª—è –∫–∞–Ω–¥–∞–ª",
            callback_data="select_shackles"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ]
    
    await callback.message.edit_text(
        "\n".join(text),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data.startswith(SHIELD_PREFIX))
async def buy_shield(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    price = int(callback.data.replace(SHIELD_PREFIX, ""))
    
    if user["balance"] < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —â–∏—Ç–∞
    if user.get("shield_active") and user["shield_active"] > datetime.now():
        await callback.answer("‚ö†Ô∏è –©–∏—Ç —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    user["balance"] -= price
    user["shield_active"] = datetime.now() + timedelta(hours=24)
    user["shop_purchases"] = user.get("shop_purchases", 0) + 1
    await update_user(user_id, user)
    
    await callback.answer(f"üõ° –©–∏—Ç –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {user['shield_active'].strftime('%d.%m %H:%M')}!", show_alert=True)
    await shop_handler(callback)

@dp.callback_query(F.data == "select_shackles")
async def select_shackles(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    
    if not user or len(user.get("slaves", [])) == 0:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ–≤!", show_alert=True)
        return
    
    buttons = []
    for slave_id in user["slaves"][:10]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 10 —Ä–∞–±–æ–≤
        slave = await get_user(slave_id)
        if not slave:
            continue
        
        price = await calculate_shackles_price(slave_id)
        buttons.append([
            InlineKeyboardButton(
                text=f"‚õì @{slave['username']} ‚Äî {price}‚ÇΩ",
                callback_data=f"{SHACKLES_PREFIX}{slave_id}_{price}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop")])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∞–ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith(SHACKLES_PREFIX))
async def buy_shackles(callback: types.CallbackQuery):
    _, slave_id, price = callback.data.split("_")
    slave_id = int(slave_id)
    price = int(price)
    user_id = callback.from_user.id
    user = await get_user(user_id)
    
    if user["balance"] < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∞–ª–æ–≤
    user["balance"] -= price
    if "shackles" not in user:
        user["shackles"] = {}
    user["shackles"][slave_id] = datetime.now() + timedelta(hours=48)
    await update_user(user_id, user)
    
    await callback.answer(
        f"‚õì –ö–∞–Ω–¥–∞–ª—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ @{slave['username']} –Ω–∞ 48 —á–∞—Å–æ–≤!",
        show_alert=True
    )
    await select_shackles(callback)

@dp.callback_query(F.data.startswith(UPGRADE_PREFIX))
async def upgrade_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    upgrade_id = callback.data.replace(UPGRADE_PREFIX, "")
    user = await get_user(user_id)
    
    if not user or upgrade_id not in upgrades:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞!", show_alert=True)
        return
    
    level = user.get("upgrades", {}).get(upgrade_id, 0)
    data = upgrades[upgrade_id]
    price = int(data["base_price"] * (data["multiplier"] ** level))
    
    if user["balance"] < price:
        await callback.answer(f"‚ùå –ù—É–∂–Ω–æ {price}‚ÇΩ!", show_alert=True)
        return
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    user["balance"] -= price
    user["upgrades"][upgrade_id] = level + 1
    
    # –°–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã
    if upgrade_id == "barracks":
        max_slaves = 5 + user["upgrades"]["barracks"] * 3
        if len(user["slaves"]) > max_slaves:
            user["slaves"] = user["slaves"][:max_slaves]
    
    await update_user(user_id, user)
    
    await callback.message.edit_reply_markup(
        reply_markup=await upgrades_keyboard(user_id)
    )
    await callback.answer(f"‚úÖ {data['name']} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {level + 1}!")
    # commands.py (Part 5/5)
@dp.callback_query(F.data == PROFILE)
async def profile_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = await get_user(user_id)
        
        if not user:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return
        
        # –†–∞—Å—á–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
        passive_income = 1 + user.get("upgrades", {}).get("storage", 0) * 5
        for slave_id in user.get("slaves", []):
            slave = await get_user(slave_id)
            if slave:
                passive_income += 80 * (1 + 0.25 * slave.get("slave_level", 0))
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –≤—ã–∫—É–ø–∞
        buyout_price = 0
        if user.get("owner"):
            base_price = user["base_price"]
            buyout_price = int(
                (base_price + user["balance"] * 0.15) * 
                (1 + user["slave_level"] * 0.35)
            )
            buyout_price = max(200, min(25000, buyout_price))
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        text = [
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å @{user['username']}</b>",
            f"‚ñ∏ üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']:.1f}‚ÇΩ",
            f"‚ñ∏ üïí –ü–∞—Å—Å–∏–≤/—á–∞—Å: {passive_income * 60:.1f}‚ÇΩ",
            f"‚ñ∏ üõ† –£–ª—É—á—à–µ–Ω–∏—è: {sum(user['upgrades'].values())}",
            f"‚ñ∏ üë• –†–∞–±–æ–≤: {len(user['slaves'])}/{5 + user['upgrades'].get('barracks', 0)*3}"
        ]
        
        if user.get("owner"):
            owner = await get_user(user["owner"])
            text.append(
                f"\n‚ö†Ô∏è <b>–í—ã —Ä–∞–± @{owner['username'] if owner else '–°–∏—Å—Ç–µ–º–∞'}</b>\n"
                f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å —Ä–∞–±—Å—Ç–≤–∞: {user['slave_level']}\n"
                f"‚ñ∏ –¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: {buyout_price}‚ÇΩ"
            )
            kb = [[InlineKeyboardButton(
                text=f"üÜì –í—ã–∫—É–ø–∏—Ç—å—Å—è –∑–∞ {buyout_price}‚ÇΩ", 
                callback_data=f"{BUYOUT_PREFIX}{buyout_price}"
            )]]
        else:
            text.append("\nüåü <b>–°—Ç–∞—Ç—É—Å:</b> –°–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω")
            kb = []
        
        kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
        
        await callback.message.edit_text(
            "\n".join(text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logging.error(f"Profile error: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == TOP_OWNERS)
async def top_owners_handler(callback: types.CallbackQuery):
    try:
        async with await get_db() as conn:
            records = await conn.fetch("SELECT data FROM bot_users")
            users_data = [deserialize_user_data(r['data']) for r in records]
        
        # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        top_list = []
        for user in users_data:
            if slaves_count := len(user.get("slaves", [])):
                efficiency = user.get("total_income", 0) / slaves_count
                top_list.append({
                    "username": user.get("username", "Unknown"),
                    "efficiency": efficiency,
                    "slaves": slaves_count,
                    "income": user.get("total_income", 0)
                })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–±–æ—Ä —Ç–æ–ø-15
        sorted_top = sorted(top_list, key=lambda x: x["efficiency"], reverse=True)[:15]
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = ["üèÜ <b>–¢–æ–ø —Ä–∞–±–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</b>\n‚ñ∏ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = –î–æ—Ö–æ–¥/–†–∞–±–∞\n"]
        for idx, item in enumerate(sorted_top, 1):
            text.append(
                f"{idx}. @{item['username']}\n"
                f"   ‚ñ∏ –≠—Ñ—Ñ.: {item['efficiency']:.1f}‚ÇΩ\n"
                f"   ‚ñ∏ –†–∞–±–æ–≤: {item['slaves']} | –î–æ—Ö–æ–¥: {item['income']}‚ÇΩ\n"
            )
        
        await callback.message.edit_text(
            "\n".join(text)[:4096],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]]
            ),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        logging.error(f"Top error: {e}", exc_info=True)
        await callback.answer("üåÄ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞", show_alert=True)
    await callback.answer()

async def passive_income_task():
    while True:
        await asyncio.sleep(60)
        try:
            async with await get_db() as conn:
                records = await conn.fetch("SELECT user_id, data FROM bot_users")
                for record in records:
                    user = deserialize_user_data(record['data'])
                    if not user.get("last_passive"):
                        continue
                        
                    mins_passed = (datetime.now() - user["last_passive"]).total_seconds() / 60
                    if mins_passed < 1:
                        continue
                    
                    # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞
                    income = 1 + user.get("upgrades", {}).get("storage", 0) * 5
                    for slave_id in user.get("slaves", []):
                        slave = await get_user(slave_id)
                        if slave:
                            income += 80 * (1 + 0.25 * slave.get("slave_level", 0))
                    
                    total_income = income * mins_passed
                    user["balance"] += total_income
                    user["total_income"] += total_income
                    user["last_passive"] = datetime.now()
                    
                    # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    await update_user(record['user_id'], user)
                    
        except Exception as e:
            logging.error(f"Passive income error: {e}")

async def autosave_task():
    while True:
        await asyncio.sleep(300)
        logging.info("Autosave completed")
        
async def on_startup():
    await init_db()
    asyncio.create_task(passive_income_task())
    asyncio.create_task(autosave_task())
    logging.info("Bot started")

async def on_shutdown():
    logging.info("Bot stopped")

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
    )
    
    try:
        asyncio.run(dp.start_polling(bot))
    except KeyboardInterrupt:
        pass
    finally:
        asyncio.run(on_shutdown())
