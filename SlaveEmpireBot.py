import logging
import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPGRADE_PREFIX = "upg_"
SLAVE_PREFIX = "slv_"
MAIN_MENU = "main_menu"
WORK = "work"
UPGRADES = "upgrades"
PROFILE = "profile"
REF_LINK = "ref_link"
BUY_MENU = "buy_menu"
CHECK_SUB = "check_sub_"
SEARCH_USER = "search_user"
DB_FILE = "users_db.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users = {}
user_search_cache = {}

# –£–ª—É—á—à–µ–Ω–∏—è
upgrades = {
    "storage": {
        "name": "üì¶ –°–∫–ª–∞–¥",
        "base_price": 500,
        "income_bonus": 10,
        "description": "+10 –º–æ–Ω–µ—Ç/–º–∏–Ω –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É"
    },
    "whip": {
        "name": "‚õì –ö–Ω—É—Ç—ã", 
        "base_price": 1000,
        "income_bonus": 25,
        "description": "+25% –∫ –¥–æ—Ö–æ–¥—É –æ—Ç —Ä–∞–±–æ—Ç—ã"
    },
    "food": {
        "name": "üçó –ï–¥–∞",
        "base_price": 2000,
        "income_bonus": 50,
        "description": "-10% –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"
    },
    "barracks": {
        "name": "üè† –ë–∞—Ä–∞–∫–∏",
        "base_price": 5000,
        "income_bonus": 100,
        "description": "+5 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data=WORK)],
        [
            InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data=UPGRADES),
            InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE)
        ],
        [
            InlineKeyboardButton(text="üë• –ö—É–ø–∏—Ç—å —Ä–∞–±–∞", callback_data=BUY_MENU),
            InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data=REF_LINK)
        ]
    ])

def upgrades_keyboard(user_id):
    buttons = []
    for upgrade_id, data in upgrades.items():
        level = users[user_id].get("upgrades", {}).get(upgrade_id, 0)
        price = data["base_price"] * (level + 1)
        buttons.append([
            InlineKeyboardButton(
                text=f"{data['name']} (–£—Ä. {level}) - {price}‚ÇΩ | {data['description']}",
                callback_data=f"{UPGRADE_PREFIX}{upgrade_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def buy_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data=SEARCH_USER)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ])
    
def save_db():
    with open(DB_FILE, 'w', encoding='utf-8') as f:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        db_to_save = {}
        for user_id, user_data in users.items():
            db_to_save[user_id] = {}
            for key, value in user_data.items():
                if isinstance(value, datetime):
                    db_to_save[user_id][key] = value.isoformat()
                else:
                    db_to_save[user_id][key] = value
        json.dump(db_to_save, f, ensure_ascii=False, indent=4)

def load_db():
    if not os.path.exists(DB_FILE):
        return {}
    
    with open(DB_FILE, 'r', encoding='utf-8') as f:
        db_loaded = json.load(f)
        
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã
    restored_db = {}
    for user_id, user_data in db_loaded.items():
        restored_db[int(user_id)] = {}
        for key, value in user_data.items():
            if key in ['last_passive', 'last_work'] and value is not None:
                restored_db[int(user_id)][key] = datetime.fromisoformat(value)
            else:
                restored_db[int(user_id)][key] = value
    return restored_db

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def passive_income_task():
    while True:
        await asyncio.sleep(60)
        now = datetime.now()
        for user_id, user in users.items():
            if "last_passive" in user:
                mins_passed = (now - user["last_passive"]).total_seconds() / 60
                
                # –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥
                base_income = 1 * mins_passed
                
                # –î–æ—Ö–æ–¥ –æ—Ç —Å–∫–ª–∞–¥–∞
                storage_income = user.get("upgrades", {}).get("storage", 0) * 10 * mins_passed
                
                # –î–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤
                slaves_income = sum(
                    100 * (1 + 0.3 * users[slave_id].get("slave_level", 0)) * mins_passed
                    for slave_id in user.get("slaves", [])
                    if slave_id in users  # –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                )
                
                total_income = base_income + storage_income + slaves_income
                
                user["balance"] += total_income
                user["total_income"] += total_income
                user["last_passive"] = now
            

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"{CHECK_SUB}{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return
    
    if user_id not in users:
        users[user_id] = {
            "balance": 100,
            "slaves": [],
            "owner": None,
            "base_price": 100,
            "slave_level": 0,
            "price": 100,
            "last_work": None,
            "upgrades": {key: 0 for key in upgrades},
            "total_income": 0,
            "username": username,
            "last_passive": datetime.now(),
            "income_per_sec": 0.0167
        }
        
        welcome_msg = (
    "üëë <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –†–ê–ë–û–í–õ–ê–î–ï–õ–¨–ß–ï–°–ö–£–Æ –ò–ú–ü–ï–†–ò–Æ!</b>\n\n"
    "‚ö°Ô∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
    "‚ñ∏ üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (—Ä–∞–∑ –≤ 20 –º–∏–Ω)\n"
    "‚ñ∏ üõ† –£–ª—É—á—à–∞–π —Å–≤–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è\n"
    "‚ñ∏ üë• –ü–æ–∫—É–ø–∞–π —Ä–∞–±–æ–≤ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n"
    "‚ñ∏ üìà –ü–æ–ª—É—á–∞–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n\n"
    "üí∞ <b>–ë–∞–∑–æ–≤–∞—è –ø–∞—Å—Å–∏–≤–∫–∞:</b> 1‚ÇΩ/–º–∏–Ω"
)
        
        await message.answer(welcome_msg, reply_markup=main_keyboard(), parse_mode=ParseMode.HTML)
    else:
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@dp.callback_query(F.data.startswith(CHECK_SUB))
async def check_sub_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.replace(CHECK_SUB, ""))
    if await check_subscription(user_id):
        if user_id not in users:
            users[user_id] = {
                "balance": 100,
                "slaves": [],
                "owner": None,
                "price": 100,
                "last_work": None,
                "upgrades": {key: 0 for key in upgrades},
                "total_income": 0,
                "username": callback.from_user.username,
                "last_passive": datetime.now(),
                "income_per_sec": 0.0167
            }
        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await callback.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == SEARCH_USER)
async def search_user_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–≥—Ä–æ–∫–∞ (–º–æ–∂–Ω–æ —Å —Å–æ–±–∞–∫–æ–π):\n"
        "–ü—Ä–∏–º–µ—Ä: <code>@username123</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <code>username123</code>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫", callback_data=BUY_MENU)]
            ]
        ),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
    

@dp.callback_query(F.data == WORK)
async def work_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    now = datetime.now()
    cooldown = timedelta(minutes=20)
    
    if user["last_work"] and (now - user["last_work"]) < cooldown:
        remaining = (user["last_work"] + cooldown - now).seconds // 60
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining} –º–∏–Ω—É—Ç", show_alert=True)
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É
    passive_per_min = 1 + user.get("upgrades", {}).get("storage", 0) * 10
    passive_per_min += sum(
        100 * (1 + 0.3 * users[slave_id].get("slave_level", 0))
        for slave_id in user.get("slaves", [])
        if slave_id in users
    ) / 60
    
    # –ë–æ–Ω—É—Å = 20 –º–∏–Ω—É—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ * –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–Ω—É—Ç–æ–≤
    whip_bonus = 1 + user.get("upgrades", {}).get("whip", 0) * 0.25
    work_bonus = passive_per_min * 20 * whip_bonus
    
    user["balance"] += work_bonus
    user["total_income"] += work_bonus
    user["last_work"] = now
    
    await callback.message.edit_text(
        f"üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞: {work_bonus:.1f}‚ÇΩ\n"
        f"‚ñ∏ –≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 20 –º–∏–Ω—É—Ç –ø–∞—Å—Å–∏–≤–∫–∏!\n"
        f"‚ñ∏ –í–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Å—Å–∏–≤/–º–∏–Ω: {passive_per_min:.1f}‚ÇΩ",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.message(F.text & ~F.text.startswith('/'))
async def process_username(message: Message):
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username (—É–¥–∞–ª—è–µ–º @ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
    username = message.text.strip().lower().replace('@', '')
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    found_user = None
    for uid, data in users.items():
        if data.get("username", "").lower() == username:
            found_user = uid
            break

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])

    if not found_user:
        await message.reply(
            "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
            "2. –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ",
            reply_markup=kb
        )
        return

    buyer_id = message.from_user.id
    if found_user == buyer_id:
        await message.reply("üåÄ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=kb)
        return

    slave = users[found_user]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ {slave['price']}‚ÇΩ (–£—Ä. {slave.get('slave_level', 0)})", 
                callback_data=f"{SLAVE_PREFIX}{found_user}"
            )
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])

    owner_info = f"@{users[slave['owner']]['username']}" if slave.get('owner') else "–°–≤–æ–±–æ–¥–µ–Ω"
    
    await message.reply(
        f"üîé <b>–ù–∞–π–¥–µ–Ω —Ä–∞–±:</b>\n"
        f"‚ñ∏ –ù–∏–∫: @{slave['username']}\n"
        f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave.get('slave_level', 0)}\n"
        f"‚ñ∏ –¶–µ–Ω–∞: {slave['price']}‚ÇΩ\n"
        f"‚ñ∏ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_info}\n\n"
        f"üí° <i>–î–æ—Ö–æ–¥ –æ—Ç —ç—Ç–æ–≥–æ —Ä–∞–±–∞: {int(100 * (1 + 0.5 * slave.get('slave_level', 0)))}‚ÇΩ –∑–∞ —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã</i>",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )
@dp.callback_query(F.data == UPGRADES)
async def upgrades_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in users:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    await callback.message.edit_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ:", reply_markup=upgrades_keyboard(user_id))
    await callback.answer()

@dp.callback_query(F.data == REF_LINK)
async def ref_link_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    await callback.message.edit_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% —Å –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞!",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == BUY_MENU)
async def buy_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("üë• –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ–≤:", reply_markup=buy_menu_keyboard())
    await callback.answer()

@dp.callback_query(F.data == MAIN_MENU)
async def main_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    await callback.answer()

@dp.callback_query(F.data.startswith(UPGRADE_PREFIX))
async def upgrade_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        upgrade_id = callback.data.replace(UPGRADE_PREFIX, "")
        
        if user_id not in users:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return

        user = users[user_id]
        upgrade_data = upgrades.get(upgrade_id)
        
        if not upgrade_data:
            await callback.answer("‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        current_level = user.get("upgrades", {}).get(upgrade_id, 0)
        price = upgrade_data["base_price"] * (current_level + 1)
        
        if user.get("balance", 0) < price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        user["balance"] -= price
        user.setdefault("upgrades", {})[upgrade_id] = current_level + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è —Å–∫–ª–∞–¥–∞
        if upgrade_id == "storage":
            user["income_per_sec"] = (1 + user["upgrades"].get("storage", 0) * 10) / 60

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        save_db()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await callback.message.edit_reply_markup(
                reply_markup=upgrades_keyboard(user_id)
            )
            await callback.answer(f"‚úÖ {upgrade_data['name']} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {current_level + 1}!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
            await callback.answer("‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–ª—É—á—à–µ–Ω–∏–π: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith(SLAVE_PREFIX))
async def buy_slave_handler(callback: types.CallbackQuery):
    try:
        buyer_id = callback.from_user.id
        slave_id = int(callback.data.replace(SLAVE_PREFIX, ""))
        
        buyer = users.get(buyer_id)
        slave = users.get(slave_id)
        
        if not buyer or not slave:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if slave_id == buyer_id:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", show_alert=True)
            return

        previous_owner_id = slave.get("owner")
        previous_owner = users.get(previous_owner_id) if previous_owner_id else None

        if previous_owner and previous_owner_id != buyer_id:
            await callback.answer(
                f"‚ùå –≠—Ç–æ—Ç —Ä–∞–± –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç @{previous_owner.get('username', 'unknown')}",
                show_alert=True
            )
            return

        price = slave.get("price", 100)
        
        if buyer["balance"] < price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
        if previous_owner:
            if slave_id in previous_owner.get("slaves", []):
                previous_owner["slaves"].remove(slave_id)
            commission = int(price * 0.1)
            previous_owner["balance"] += commission
            previous_owner["total_income"] += commission

        buyer["balance"] -= price
        buyer["total_income"] -= price
        buyer.setdefault("slaves", []).append(slave_id)

        slave["owner"] = buyer_id
        slave["slave_level"] = slave.get("slave_level", 0) + 1
        slave["price"] = int(slave.get("base_price", 100) * (1.5 ** slave["slave_level"]))

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = [
            f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏ @{slave.get('username', '–±–µ–∑—ã–º—è–Ω–Ω—ã–π')} –∑–∞ {price}‚ÇΩ!",
            f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave['slave_level']}",
            f"‚ñ∏ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {slave['price']}‚ÇΩ"
        ]
        
        if previous_owner:
            msg.append(f"‚ñ∏ –ö–æ–º–∏—Å—Å–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É: {commission}‚ÇΩ")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç–≤–µ—Ç–∞
        save_db()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ä–∞–±–∞: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –±–ª–æ–∫–∞ try-except
    await callback.message.edit_text("\n".join(msg), reply_markup=main_keyboard())
    await callback.answer()
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(F.data == PROFILE)
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    slaves_count = len(user.get("slaves", []))
    max_slaves = 5 + user.get("upgrades", {}).get("barracks", 0) * 5
    income_per_sec = (1 + user.get("upgrades", {}).get("storage", 0) * 10) / 60
    passive_per_min = 1 + user.get("upgrades", {}).get("storage", 0) * 10
    passive_per_min += sum(
        100 * (1 + 0.3 * users[slave_id].get("slave_level", 0))
        for slave_id in user["slaves"]
    )
    
    text = (
        f"üëë <b>–ü—Ä–æ—Ñ–∏–ª—å @{user.get('username', 'unknown')}</b>\n\n"
        f"‚ñ∏ üí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0):.1f}‚ÇΩ\n"
        f"‚ñ∏ ‚ö° –î–æ—Ö–æ–¥/–º–∏–Ω: {passive_per_min:.1f}‚ÇΩ\n"
        f"‚ñ∏ üë• –†–∞–±—ã: {slaves_count}/{max_slaves}\n"
        f"‚ñ∏ üõ† –£–ª—É—á—à–µ–Ω–∏—è: {sum(user.get('upgrades', {}).values())}\n"
        f"‚ñ∏ üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.get('total_income', 0):.1f}‚ÇΩ\n\n"
    )
    
    if user.get("owner"):
        owner_username = users.get(user["owner"], {}).get("username", "unknown")
        text += f"üîó –í–ª–∞–¥–µ–ª–µ—Ü: @{owner_username}\n"
    else:
        text += "üîó –í—ã —Å–≤–æ–±–æ–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫!\n"
    
    if slaves_count > 0:
        text += "\n<b>–¢–æ–ø —Ä–∞–±–æ–≤:</b>\n"
        for uid in user.get("slaves", [])[:3]:
            slave_data = users.get(uid, {})
            text += f"‚ñ∏ @{slave_data.get('username', 'unknown')} ({slave_data.get('price', 0)}‚ÇΩ)\n"
    
    await callback.message.edit_text(text, reply_markup=main_keyboard())
    await callback.answer()

async def autosave_task():
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        save_db()
        
async def on_startup():
    global users
    users = load_db()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    asyncio.create_task(passive_income_task())
    asyncio.create_task(autosave_task())
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–î –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    import signal
    import functools
    def save_on_exit(*args):
        save_db()
    
    signal.signal(signal.SIGTERM, save_on_exit)
    signal.signal(signal.SIGINT, save_on_exit)
    
async def on_shutdown():
    save_db() 


async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler("bot.log", encoding='utf-8')
            ]
        )
        logger = logging.getLogger(__name__)
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await on_startup()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        await on_shutdown()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        # –î–ª—è Windows –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π event loop
        if os.name == 'nt':
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
            
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
