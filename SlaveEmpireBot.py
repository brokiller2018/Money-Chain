import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPGRADE_PREFIX = "upg_"
SLAVE_PREFIX = "slv_"
MAIN_MENU = "main_menu"
WORK = "work"
UPGRADES = "upgrades"
PROFILE = "profile"
REF_LINK = "ref_link"
BUY_MENU = "buy_menu"
CHECK_SUB = "check_sub_"
SEARCH_USER = "search_user"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users = {}
user_search_cache = {}

# –£–ª—É—á—à–µ–Ω–∏—è
upgrades = {
    "storage": {
        "name": "üì¶ –°–∫–ª–∞–¥",
        "base_price": 500,
        "income_bonus": 10,
        "description": "+10 –º–æ–Ω–µ—Ç/–º–∏–Ω –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É"
    },
    "whip": {
        "name": "‚õì –ö–Ω—É—Ç—ã", 
        "base_price": 1000,
        "income_bonus": 25,
        "description": "+25% –∫ –¥–æ—Ö–æ–¥—É –æ—Ç —Ä–∞–±–æ—Ç—ã"
    },
    "food": {
        "name": "üçó –ï–¥–∞",
        "base_price": 2000,
        "income_bonus": 50,
        "description": "-10% –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"
    },
    "barracks": {
        "name": "üè† –ë–∞—Ä–∞–∫–∏",
        "base_price": 5000,
        "income_bonus": 100,
        "description": "+5 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data=WORK)],
        [
            InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data=UPGRADES),
            InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE)
        ],
        [
            InlineKeyboardButton(text="üë• –ö—É–ø–∏—Ç—å —Ä–∞–±–∞", callback_data=BUY_MENU),
            InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data=REF_LINK)
        ]
    ])

def upgrades_keyboard(user_id):
    buttons = []
    for upgrade_id, data in upgrades.items():
        level = users[user_id].get("upgrades", {}).get(upgrade_id, 0)
        price = data["base_price"] * (level + 1)
        buttons.append([
            InlineKeyboardButton(
                text=f"{data['name']} (–£—Ä. {level}) - {price}‚ÇΩ | {data['description']}",
                callback_data=f"{UPGRADE_PREFIX}{upgrade_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def buy_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data=SEARCH_USER)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ])

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def passive_income():
    while True:
        await asyncio.sleep(60)
        now = datetime.now()
        for user_id, user in users.items():
            if "last_passive" in user:
                mins_passed = (now - user["last_passive"]).total_seconds() / 60
                if mins_passed >= 1:
                    income = (1 + user["upgrades"].get("storage", 0) * 10) * mins_passed
                    user["balance"] += income
                    user["last_passive"] = now
                    user["total_income"] += income
                    
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚è≥ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: +{income:.2f}‚ÇΩ\n"
                            f"‚ñ∏ –°–∫–ª–∞–¥: {user['upgrades'].get('storage', 0)} —É—Ä."
                        )
                    except:
                        pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"{CHECK_SUB}{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return
    
    if user_id not in users:
        users[user_id] = {
            "balance": 100,
            "slaves": [],
            "owner": None,
            "price": 100,
            "last_work": None,
            "upgrades": {key: 0 for key in upgrades},
            "total_income": 0,
            "username": username,
            "last_passive": datetime.now(),
            "income_per_sec": 0.0167
        }
        
        welcome_msg = """
üéÆ <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –†–ê–ë–û–í–õ–ê–î–ï–õ–¨–ß–ï–°–ö–£–Æ –ò–ú–ü–ï–†–ò–Æ!</b> üëë

‚ö°Ô∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚ñ∏ üíº –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–π (–∫–∞–∂–¥—ã–µ 20 –º–∏–Ω)
‚ñ∏ üõ† –£–ª—É—á—à–∞–π —Å–≤–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è
‚ñ∏ üë• –ü–æ–∫—É–ø–∞–π –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
‚ñ∏ üìà –ü–æ–ª—É—á–∞–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ (1‚ÇΩ/–º–∏–Ω)

üí∞ <b>–î–æ—Ö–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—É:</b> 0.016‚ÇΩ
        """
        
        await message.answer(welcome_msg, reply_markup=main_keyboard())
    else:
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@dp.callback_query(F.data.startswith(CHECK_SUB))
async def check_sub_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.replace(CHECK_SUB, ""))
    if await check_subscription(user_id):
        if user_id not in users:
            users[user_id] = {
                "balance": 100,
                "slaves": [],
                "owner": None,
                "price": 100,
                "last_work": None,
                "upgrades": {key: 0 for key in upgrades},
                "total_income": 0,
                "username": callback.from_user.username,
                "last_passive": datetime.now(),
                "income_per_sec": 0.0167
            }
        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await callback.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == SEARCH_USER)
async def search_user_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–≥—Ä–æ–∫–∞ (–±–µ–∑ —Å–æ–±–∞—á–∫–∏):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
            ]
        )
    )
    await callback.answer()

@dp.message(F.text & ~F.text.startswith('/'))
async def process_username(message: Message):
    username = message.text.strip().lower()
    buyer_id = message.from_user.id
    
    found_user = None
    for uid, data in users.items():
        if data["username"] and data["username"].lower() == username:
            found_user = uid
            break
    
    if not found_user:
        return await message.reply("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    if found_user == buyer_id:
        return await message.reply("üåÄ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
    
    slave = users[found_user]
    price = slave["price"]
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ {price}‚ÇΩ", callback_data=f"{SLAVE_PREFIX}{found_user}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])
    
    await message.reply(
        f"üîé <b>–ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫:</b> @{slave['username']}\n"
        f"‚ñ∏ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
        f"‚ñ∏ –í–ª–∞–¥–µ–ª–µ—Ü: @{users[slave['owner']]['username'] if slave['owner'] else '–°–≤–æ–±–æ–¥–µ–Ω'}",
        reply_markup=kb
    )

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(F.data == PROFILE)
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    slaves_count = len(user["slaves"])
    max_slaves = 5 + user["upgrades"]["barracks"] * 5
    income_per_sec = (1 + user["upgrades"]["storage"] * 10) / 60
    
    text = (
        f"üëë <b>–ü—Ä–æ—Ñ–∏–ª—å @{user['username']}</b>\n\n"
        f"‚ñ∏ üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']:.1f}‚ÇΩ\n"
        f"‚ñ∏ ‚ö° –î–æ—Ö–æ–¥/—Å–µ–∫: {income_per_sec:.3f}‚ÇΩ\n"
        f"‚ñ∏ üë• –†–∞–±—ã: {slaves_count}/{max_slaves}\n"
        f"‚ñ∏ üõ† –£–ª—É—á—à–µ–Ω–∏—è: {sum(user['upgrades'].values())}\n"
        f"‚ñ∏ üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_income']:.1f}‚ÇΩ\n\n"
    )
    
    if user["owner"]:
        text += f"üîó –í–ª–∞–¥–µ–ª–µ—Ü: @{users[user['owner']]['username']}\n"
    else:
        text += "üîó –í—ã —Å–≤–æ–±–æ–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫!\n"
    
    if slaves_count > 0:
        text += "\n<b>–¢–æ–ø —Ä–∞–±–æ–≤:</b>\n"
        for uid in user["slaves"][:3]:
            text += f"‚ñ∏ @{users[uid]['username']} ({users[uid]['price']}‚ÇΩ)\n"
    
    await callback.message.edit_text(text, reply_markup=main_keyboard())
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
async def on_startup():
    asyncio.create_task(passive_income_task())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

async def main():
    asyncio.create_task(passive_income())
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
