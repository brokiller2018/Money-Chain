import logging
import asyncio
import json
import os
import psycopg2
import random
import time
from psycopg2.extras import Json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from datetime import datetime, timedelta


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPGRADE_PREFIX = "upg_"
SLAVE_PREFIX = "slv_"
MAIN_MENU = "main_menu"
WORK = "work"
UPGRADES = "upgrades"
PROFILE = "profile"
REF_LINK = "ref_link"
BUY_MENU = "buy_menu"
CHECK_SUB = "check_sub_"
SEARCH_USER = "search_user"
TOP_OWNERS = "top_owners"
BUYOUT_PREFIX = "buyout_"
SHIELD_PREFIX = "shield_"
SHACKLES_PREFIX = "shackles_"
MAX_SLAVE_LEVEL = 15
DAILY_WORK_LIMIT = 10
MAX_BARRACKS_LEVEL = 10
DAILY_WORK_LIMIT = 7
MIN_SLAVES_FOR_RANDOM = 3 
BLACKJACK_PREFIX = "bj_"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users = {}
user_search_cache = {}

# –£–ª—É—á—à–µ–Ω–∏—è
upgrades = {
    "storage": {
        "name": "üì¶ –°–∫–ª–∞–¥",
        "base_price": 300, 
        "income_bonus": 5,
        "price_multiplier": 1.3,
        "description": "+8 –º–æ–Ω–µ—Ç/–º–∏–Ω –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É"
    },
    "whip": {
        "name": "‚õì –ö–Ω—É—Ç—ã", 
        "base_price": 800,
        "income_bonus": 0.18,  # +18% –∫ —Ä–∞–±–æ—Ç–µ (–±—ã–ª–æ +25%)
        "price_multiplier": 1.3,
        "description": "+18% –∫ –¥–æ—Ö–æ–¥—É –æ—Ç —Ä–∞–±–æ—Ç—ã"
    },
    "food": {
        "name": "üçó –ï–¥–∞",
        "base_price": 1500,
        "income_bonus": 0.08,  # -8% –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        "price_multiplier": 1.5,
        "description": "-8% –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"
    },
    "barracks": {
        "name": "üè† –ë–∞—Ä–∞–∫–∏",
        "base_price": 3000,
        "income_bonus": 2,  # +2 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤
        "price_multiplier": 1.6,
        "description": "+2 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data=WORK)],
        [
            InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data=UPGRADES),
            InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE)
        ],
        [
            InlineKeyboardButton(text="üë• –ö—É–ø–∏—Ç—å —Ä–∞–±–∞", callback_data=BUY_MENU),
            InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
        ],
        [    
            InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –≤ 21", callback_data="play_21"),
            InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data=REF_LINK)
        ],
        [
            InlineKeyboardButton(text="üèÜ –¢–æ–ø –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤", callback_data=TOP_OWNERS)
        ]
    ])

def get_db_connection():
    return psycopg2.connect(os.getenv("DATABASE_URL"))

class Card:
    def __init__(self, suit, rank):
        self.suit = suit
        self.rank = rank
        
    @property
    def value(self):
        if self.rank in ['J', 'Q', 'K']:
            return 10
        if self.rank == 'A':
            return 11
        return int(self.rank)
        
    def __repr__(self):
        suits = {'Spades': '‚ô†Ô∏è', 'Hearts': '‚ô•Ô∏è', 'Diamonds': '‚ô¶Ô∏è', 'Clubs': '‚ô£Ô∏è'}
        return f"{suits[self.suit]}{self.rank}"

# –ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã –≤ Blackjack
class BlackjackGame:
    def __init__(self, user_id, bet):
        self.user_id = user_id
        self.bet = bet
        self.deck = self.create_deck()
        self.player_hand = []
        self.dealer_hand = []
        self.game_over = False
        
    @staticmethod
    def create_deck():
        suits = ['Spades', 'Hearts', 'Diamonds', 'Clubs']
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        return [Card(s, r) for s in suits for r in ranks] * 2  # 2 –∫–æ–ª–æ–¥—ã
        
    def calculate_hand(self, hand):
        value = sum(card.value for card in hand)
        aces = sum(1 for card in hand if card.rank == 'A')
        
        while value > 21 and aces:
            value -= 10
            aces -= 1
            
        return value
        
    def deal_card(self):
        return self.deck.pop(random.randint(0, len(self.deck)-1))
        
    async def start_game(self):
        self.deck = self.create_deck()
        random.shuffle(self.deck)
        self.player_hand = [self.deal_card(), self.deal_card()]
        self.dealer_hand = [self.deal_card(), self.deal_card()]
    
    # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª—ç–∫–¥–∂–µ–∫
    if self.calculate_hand(self.player_hand) == 21:
        await self.end_game('blackjack', None, None)
        
    async def handle_action(self, action, message, bot):
        if self.game_over:
            return
            
        if action == 'hit':
            self.player_hand.append(self.deal_card())
            if self.calculate_hand(self.player_hand) > 21:
                await self.end_game('lose', message, bot)
                
        elif action == 'stand':
            await self.dealer_turn(message, bot)
            
        elif action == 'double':
            if len(self.player_hand) == 2:
                self.bet *= 2
                self.player_hand.append(self.deal_card())
                await self.dealer_turn(message, bot)
                
        await self.update_display(message, bot)
        
    async def dealer_turn(self, message, bot):
        while self.calculate_hand(self.dealer_hand) < 17:
            self.dealer_hand.append(self.deal_card())
        await self.end_game(None, message, bot)
        
    async def end_game(self, result, message, bot):
        self.game_over = True
        player_value = self.calculate_hand(self.player_hand)
        dealer_value = self.calculate_hand(self.dealer_hand)
    
        if not result:
            if player_value > 21:
                result = 'lose'
            elif dealer_value > 21 or player_value > dealer_value:
                result = 'win'
            elif player_value == dealer_value:
                result = 'draw'
            else:
                result = 'lose'
                
        user = users[self.user_id]
        
        if result == 'win':
            win_amount = int(self.bet * 1.5) if len(self.player_hand) == 2 and player_value == 21 else self.bet
            user["balance"] += win_amount
            text = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount}‚ÇΩ!"
        elif result == 'draw':
            text = "ü§ù –ù–∏—á—å—è! –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞"
        else:
            user["balance"] -= self.bet
            text = f"üí∏ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {self.bet}‚ÇΩ"
            
        if self.user_id in active_games:
            del active_games[self.user_id]
            
        await message.edit_text(
            text=(
                f"{text}\n\n"
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.player_hand} ({player_value})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {self.dealer_hand} ({dealer_value})"
            ),
            reply_markup=main_keyboard()
        )
        save_db()
        
    async def update_display(self, message, bot):
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(text="–í–∑—è—Ç—å –∫–∞—Ä—Ç—É ‚úã", callback_data="bj_hit"),
            types.InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è ‚úã", callback_data="bj_stand"),
            types.InlineKeyboardButton(text="–£–¥–≤–æ–∏—Ç—å ‚è´", callback_data="bj_double")
        )
        
        await message.edit_text(
            text=(
                f"üí∞ –°—Ç–∞–≤–∫–∞: {self.bet}‚ÇΩ\n"
                f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.player_hand} ({self.calculate_hand(self.player_hand)})\n"
                f"–ö–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {self.dealer_hand[0]} ?"
            ),
            reply_markup=builder.as_markup()
        )
active_games = {}
def upgrades_keyboard(user_id):
    buttons = []
    for upgrade_id, data in upgrades.items():
        level = users[user_id].get("upgrades", {}).get(upgrade_id, 0)
        price = data["base_price"] * (level + 1)
        buttons.append([
            InlineKeyboardButton(
                text=f"{data['name']} (–£—Ä. {level}) - {price}‚ÇΩ | {data['description']}",
                callback_data=f"{UPGRADE_PREFIX}{upgrade_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def buy_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data=SEARCH_USER)],
        [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Ä–∞–±—ã (–¢–æ–ø-10)", callback_data="random_slaves")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ])
    
def serialize_user_data(user_data: dict) -> dict:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON"""
    serialized = {}
    for key, value in user_data.items():
        if isinstance(value, datetime):
            serialized[key] = value.isoformat()
        elif isinstance(value, dict) and key == "shackles":
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–∞–Ω–¥–∞–ª—ã
            serialized[key] = {
                str(slave_id): end_time.isoformat() 
                for slave_id, end_time in value.items()
            }
        else:
            serialized[key] = value
    return serialized

def deserialize_user_data(data: dict) -> dict:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –∏–∑ —Å—Ç—Ä–æ–∫"""
    deserialized = {}
    for key, value in data.items():
        if key in ['last_passive', 'last_work', 'shield_active'] and value:
            try:
                deserialized[key] = datetime.fromisoformat(value)
            except (TypeError, ValueError):
                deserialized[key] = None
        elif key == "shackles" and isinstance(value, dict):
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–∞–Ω–¥–∞–ª—ã
            deserialized[key] = {
                int(slave_id): datetime.fromisoformat(end_time)
                for slave_id, end_time in value.items()
            }
        else:
            deserialized[key] = value
    return deserialized

def save_db():
    conn = None
    try:
        conn = get_db_connection()
        with conn:
            with conn.cursor() as cur:
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS bot_users (
                        user_id BIGINT PRIMARY KEY,
                        data JSONB NOT NULL,
                        last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    )
                """)
                
                # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                for user_id, user_data in users.items():
                    serialized_data = serialize_user_data(user_data)
                    cur.execute("""
                        INSERT INTO bot_users (user_id, data)
                        VALUES (%s, %s)
                        ON CONFLICT (user_id) 
                        DO UPDATE SET 
                            data = EXCLUDED.data,
                            last_updated = NOW()
                    """, (user_id, Json(serialized_data)))
        
    except psycopg2.Error as e:
        logging.error(f"Database error in save_db: {e}")
        raise
    finally:
        if conn:
            conn.close()


def load_db():
    conn = None
    try:
        conn = get_db_connection()
        with conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'bot_users'
                    )
                """)
                table_exists = cur.fetchone()[0]
                
                if not table_exists:
                    return {}
                
                cur.execute("SELECT user_id, data FROM bot_users")
                rows = cur.fetchall()
                
                loaded_users = {}
                for user_id, data in rows:
                    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                    loaded_users[user_id] = deserialize_user_data(data)
                
                return loaded_users
                
    except psycopg2.Error as e:
        logging.error(f"Database error in load_db: {e}")
        return {}
    finally:
        if conn:
            conn.close()

def passive_income(user):
    base = 1 + user["upgrades"].get("storage", 0) * 5
    slaves = sum(
        50 * (1 + 0.2 * slave_level(slave_id)) 
        for slave_id in user.get("slaves", [])
    )
    return base + slaves * (1 + 0.05 * user["upgrades"].get("barracks", 0))

def calculate_shield_price(user_id):
    user = users[user_id]
    # –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ (1 + —Å–∫–ª–∞–¥) –≤ –º–∏–Ω—É—Ç—É
    passive_per_min = 1 + user.get("upgrades", {}).get("storage", 0) * 10
    # –î–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    passive_per_min += sum(
        100 * (1 + 0.3 * users[slave_id].get("slave_level", 0))
        for slave_id in user.get("slaves", [])
        if slave_id in users
    )
    # –¶–µ–Ω–∞ = 50% –¥–æ—Ö–æ–¥–∞ –∑–∞ 12 —á–∞—Å–æ–≤, –æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ 10
    base_price = passive_per_min * 60 * 6  # 6 —á–∞—Å–æ–≤
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ —â–∏—Ç–∞
    shop_purchases = user.get("shop_purchases", 0)
    price = base_price * (1.1 ** shop_purchases) 
    price = max(500, min(8000, price))  # –ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã
    # –°–∫–∏–¥–∫–∞ –∑–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É
    if user.get("shop_purchases", 0) == 0:
        price = int(price * 0.7)
    return price

def calculate_shackles_price(owner_id):
    owner = users[owner_id]
    
    # 1. –°—á–∏—Ç–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —á–∞—Å
    passive_income = (
        1 + owner.get("upgrades", {}).get("storage", 0) * 10  # –°–∫–ª–∞–¥
    ) * 60  # –í —á–∞—Å
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –æ—Ç –≤—Å–µ—Ö —Ä–∞–±–æ–≤
    for slave_id in owner.get("slaves", []):
        if slave_id in users:
            slave = users[slave_id]
            passive_income += 100 * (1 + 0.3 * slave.get("slave_level", 0))
    
    # 3. –¶–µ–Ω–∞ = 150% –æ—Ç —á–∞—Å–æ–≤–æ–≥–æ –¥–æ—Ö–æ–¥–∞, –æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ 100
    price = int(passive_income * 1.5 / 100) * 100
    
    # 4. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (300‚Äì10 000‚ÇΩ)
    return max(300, min(10_000, price))

def slave_price(slave_data: dict) -> int:
    return int(500 * (1.5 ** min(slave_data.get("slave_level", 0), MAX_SLAVE_LEVEL)))

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def passive_income_task():
    while True:
        await asyncio.sleep(60)
        try:
            now = datetime.now()
            for user_id, user in users.items():
                if "last_passive" not in user:
                    user["last_passive"] = now
                    continue
                    
                mins_passed = (now - user["last_passive"]).total_seconds() / 60
                mins_passed = min(mins_passed, 180)  # –ú–∞–∫—Å–∏–º—É–º 3 —á–∞—Å–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω
                
                # 1. –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ (1‚ÇΩ/–º–∏–Ω)
                base_income = 1 * mins_passed
                
                # 2. –î–æ—Ö–æ–¥ –æ—Ç —Å–∫–ª–∞–¥–∞ (10‚ÇΩ/–º–∏–Ω –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
                storage_level = user.get("upgrades", {}).get("storage", 0)
                storage_income = storage_level * 10 * mins_passed
                
                # 3. –î–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤ —Å –Ω–∞–ª–æ–≥–æ–º
                slaves_income = 0
                if user.get("slaves"):
                    for slave_id in user["slaves"]:
                        if slave_id in users:
                            slave = users[slave_id]
                            
                            # –î–æ—Ö–æ–¥ —Ä–∞–±–∞ (100‚ÇΩ/—á–∞—Å –±–∞–∑–æ–≤—ã–π + 30% –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
                            slave_income = 100 * (1 + 0.3 * slave.get("slave_level", 0)) * (mins_passed / 60)
                            
                            # –ù–∞–ª–æ–≥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –£–†–û–í–ù–Ø –†–ê–ë–ê (–∞ –Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞!)
                            slave_level = slave.get("slave_level", 0)
                            tax_rate = min(0.1 + 0.05 * slave_level, 0.3)
                            tax = int(slave_income * tax_rate)
                            
                            # –†–∞–± –ø–æ–ª—É—á–∞–µ—Ç 70-90% –¥–æ—Ö–æ–¥–∞
                            slave["balance"] = min(slave.get("balance", 0) + slave_income - tax, 100_000)
                            
                            # –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–ª–æ–≥ 10-30%
                            slaves_income += tax
                
                # –ò—Ç–æ–≥–æ–≤—ã–π –¥–æ—Ö–æ–¥ (–±–∞–∑–∞ + —Å–∫–ª–∞–¥ + –Ω–∞–ª–æ–≥–∏ —Å —Ä–∞–±–æ–≤)
                total_income = base_income + storage_income + slaves_income
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                user["balance"] = min(user.get("balance", 0) + total_income, 100_000)
                user["total_income"] = user.get("total_income", 0) + total_income
                user["last_passive"] = now
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–Ω–µ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)
            if int(time.time()) % 300 == 0:
                save_db()
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ passive_income_task: {e}", exc_info=True)
            await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü–æ–ª—É—á–∞–µ–º referrer_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    referrer_id = None
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if referrer_id == user_id or referrer_id not in users:
                referrer_id = None
        except (ValueError, IndexError):
            referrer_id = None

    if not await check_subscription(user_id):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Å—Ä–∞–∑—É, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
        if referrer_id:
            users.setdefault(user_id, {})["referrer"] = referrer_id
            save_db()
            
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"{CHECK_SUB}{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return
    
    if user_id not in users:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        users[user_id] = {
            "balance": 100,
            "slaves": [],
            "owner": None,
            "base_price": 100,
            "enslaved_date": None,
            "slave_level": 0,
            "price": 100,
            "last_work": None,
            "upgrades": {key: 0 for key in upgrades},
            "total_income": 0,
            "username": username,
            "shield_active": None,  # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —â–∏—Ç–∞
            "shackles": {},  # {slave_id: end_time}
            "shop_purchases": 0,  # –°—á–µ—Ç—á–∏–∫ –ø–æ–∫—É–ø–æ–∫ –∑–∞ –¥–µ–Ω—å
            "last_passive": datetime.now(),
            "income_per_sec": 0.0167,
            "referrer": None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        }
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É
        if referrer_id and referrer_id in users:
            if referrer_id not in user.get("referrals", []):
                user["referrals"].append(referrer_id)
                bonus = min(100, int(new_user["balance"] * 0.05))
                users[referrer_id]["balance"] += bonus
                users[referrer_id]["total_income"] += bonus
            try:
                await bot.send_message(
                    referrer_id,
                    f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus}‚ÇΩ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ @{username}!"
                )
            except Exception:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        welcome_msg = (
            "üëë <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –†–ê–ë–û–í–õ–ê–î–ï–õ–¨–ß–ï–°–ö–£–Æ –ò–ú–ü–ï–†–ò–Æ!</b>\n\n"
            "‚ö°Ô∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚ñ∏ üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (—Ä–∞–∑ –≤ 20 –º–∏–Ω)\n"
            "‚ñ∏ üõ† –£–ª—É—á—à–∞–π —Å–≤–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è\n"
            "‚ñ∏ üë• –ü–æ–∫—É–ø–∞–π —Ä–∞–±–æ–≤ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n"
            "‚ñ∏ üìà –ü–æ–ª—É—á–∞–π –¥–æ—Ö–æ–¥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n\n"
        )
        
        if referrer_id:
            referrer_name = users.get(referrer_id, {}).get("username", "–¥—Ä—É–≥")
            welcome_msg += f"ü§ù –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{referrer_name}\n\n"
        
        welcome_msg += "üí∞ <b>–ë–∞–∑–æ–≤–∞—è –ø–∞—Å—Å–∏–≤–∫–∞:</b> 1‚ÇΩ/–º–∏–Ω"
        
        save_db()
        await message.answer(welcome_msg, reply_markup=main_keyboard(), parse_mode=ParseMode.HTML)
    else:
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@dp.message(Command('fix_economy'))
async def fix_economy(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    for user_id in users:
        users[user_id]["balance"] = min(users[user_id]["balance"], 10_000)  # –ú–∞–∫—Å 10–∫
    
    save_db()
    await message.answer("–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!")

@dp.message(Command("top_user"))
async def handle_top_user_command(message: types.Message):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /top_user –æ—Ç {message.from_user.id}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–±–æ–≤
        top_owners = sorted(
            [u for u in users.values() if u.get('slaves')],
            key=lambda x: len(x['slaves']),
            reverse=True
        )[:5]

        if not top_owners:
            await message.reply("üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ–≤–ª–∞–¥–µ–ª—å—Ü–∞")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response = ["üèÜ <b>–¢–æ–ø —Ä–∞–±–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b>\n"]
        for i, owner in enumerate(top_owners, 1):
            response.append(
                f"{i}. @{owner.get('username', 'unknown')} "
                f"- {len(owner['slaves'])} —Ä–∞–±–æ–≤"
            )

        await message.reply("\n".join(response), parse_mode="HTML")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /top_user: {e}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–ø–∞")

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã
@dp.callback_query(F.data.startswith(BLACKJACK_PREFIX))
async def blackjack_handler(callback: types.CallbackQuery):
    try:
        action = callback.data.split("_")[1]
        user_id = callback.from_user.id
        
        if user_id not in active_games:
            await callback.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
            
        game = active_games[user_id]
        await game.handle_action(action, callback.message, bot)
        await callback.answer()
    except Exception as e:
        logging.error(f"Blackjack error: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–µ", show_alert=True)

@dp.message(Command("blackjack"))
async def start_blackjack(message: types.Message):
    user_id = message.from_user.id
    bet = 500  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Å—Ç–∞–≤–∫—É
    
    if user_id in active_games:
        await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É!")
        return
        
    if users[user_id]["balance"] < bet:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
        
    game = BlackjackGame(user_id, bet)
    game.start_game()
    active_games[user_id] = game
    
    await game.update_display(message, bot)

@dp.callback_query(F.data == "random_slaves")
async def show_random_slaves(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = users.get(user_id)
        
        if not user:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –±–∞—Ä–∞–∫–æ–≤
        barracks_level = user.get("upgrades", {}).get("barracks", 0)
        slave_limit = 5 + 2 * barracks_level
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞–±–æ–≤
        current_slaves = len(user.get("slaves", []))
        if current_slaves >= slave_limit:
            await callback.answer(
                f"‚ùå –õ–∏–º–∏—Ç —Ä–∞–±–æ–≤ ({slave_limit}). –£–ª—É—á—à–∏—Ç–µ –±–∞—Ä–∞–∫–∏!",
                show_alert=True
            )
            return

        available = []
        for slave_id, slave_data in users.items():
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if slave_id == user_id:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if slave_data.get('owner') == user_id:
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —â–∏—Ç–∞
            shield = slave_data.get('shield_active')
            if shield and (isinstance(shield, str) or isinstance(shield, datetime)):
                try:
                    if isinstance(shield, str):
                        shield = datetime.fromisoformat(shield)
                    if shield > datetime.now():
                        continue
                except Exception:
                    continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ (–ù–û–í–û–ï)
            if slave_data.get("last_purchased"):
                cooldown = timedelta(hours=3)
                if datetime.now() - slave_data["last_purchased"] < cooldown:
                    continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not slave_data.get('username'):
                continue
                
            available.append((slave_id, slave_data))

        if not available:
            await callback.answer("üò¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ–≤", show_alert=True)
            return
            
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-10 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ–≤
        available.sort(
            key=lambda x: x[1].get('price', 100) * (1 + 0.5 * x[1].get('slave_level', 0)),
            reverse=True
        )
        selected = available[:10]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        buttons = []
        for slave_id, slave_data in selected:
            price = slave_data.get('price', 100)
            level = slave_data.get('slave_level', 0)
            income = int(100 * (1 + 0.3 * level))  # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞
            
            btn_text = (
                f"üë§ –£—Ä.{level} @{slave_data.get('username', 'unknown')}\n"
                f"üí∞ {price}‚ÇΩ | üè∑ {income}‚ÇΩ/—á–∞—Å"
            )
            
            buttons.append([
                InlineKeyboardButton(
                    text=btn_text,
                    callback_data=f"{SLAVE_PREFIX}{slave_id}"
                )
            ])

        buttons.append([
            InlineKeyboardButton(
                text=f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ ({len(available)} –¥–æ—Å—Ç—É–ø–Ω–æ)",
                callback_data="random_slaves"
            )
        ])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)])

        await callback.message.edit_text(
            "üé≤ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±—ã (–¢–æ–ø-10 –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏):</b>\n"
            f"‚ñ∏ –í–∞—à –ª–∏–º–∏—Ç —Ä–∞–±–æ–≤: {current_slaves}/{slave_limit}\n"
            f"‚ñ∏ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∫—É–ø–∞: 3 —á–∞—Å–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ random_slaves: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞", show_alert=True)

    
@dp.callback_query(F.data.startswith(CHECK_SUB))
async def check_sub_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.replace(CHECK_SUB, ""))
    
    if await check_subscription(user_id):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if user_id not in users:
            users[user_id] = {
                "balance": 100,
                "slaves": [],
                "owner": None,
                "price": 100,
                "last_work": None,
                "upgrades": {key: 0 for key in upgrades},
                "total_income": 0,
                "username": callback.from_user.username,
                "last_passive": datetime.now(),
                "income_per_sec": 0.0167,
                "referrer": None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            }
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É
        referrer_id = users[user_id].get("referrer")
        if referrer_id and referrer_id in users:
            bonus = 50  # 10% –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            users[referrer_id]["balance"] += bonus
            users[referrer_id]["total_income"] += bonus
            save_db()
            
        save_db()
        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await callback.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    await callback.answer()
@dp.callback_query(F.data == SEARCH_USER)
async def search_user_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–≥—Ä–æ–∫–∞:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>@username123</code>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫", callback_data=BUY_MENU)]
            ]
        ),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
    

@dp.callback_query(F.data == WORK)
async def work_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    now = datetime.now()
    cooldown = timedelta(minutes=30)  # –£–≤–µ–ª–∏—á–µ–Ω –∫—É–ª–¥–∞—É–Ω
    
    if user["last_work"] and (now - user["last_work"]) < cooldown:
        remaining = (user["last_work"] + cooldown - now).seconds // 60
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining} –º–∏–Ω—É—Ç", show_alert=True)
        return
    if user.get("work_count", 0) >= DAILY_WORK_LIMIT:
        await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç!")
        return
    user["work_count"] = user.get("work_count", 0) + 1
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É
    passive_per_min = 1 + user.get("upgrades", {}).get("storage", 0) * 10
    passive_per_min += sum(
        100 * (1 + 0.3 * users[slave_id].get("slave_level", 0))
        for slave_id in user.get("slaves", [])
        if slave_id in users
    ) / 60
    
    # –ë–æ–Ω—É—Å = 20 –º–∏–Ω—É—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ * –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–Ω—É—Ç–æ–≤
    whip_bonus = 1 + user.get("upgrades", {}).get("whip", 0) * 0.25
    work_bonus = passive_per_min * 10 * (1 + whip_bonus)
    
    user["balance"] += work_bonus
    user["total_income"] += work_bonus
    user["last_work"] = now
    
    await callback.message.edit_text(
        f"üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞: {work_bonus:.1f}‚ÇΩ\n"
        f"‚ñ∏ –≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 20 –º–∏–Ω—É—Ç –ø–∞—Å—Å–∏–≤–∫–∏!\n"
        f"‚ñ∏ –í–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Å—Å–∏–≤/–º–∏–Ω: {passive_per_min:.1f}‚ÇΩ",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.message(
    F.text & 
    F.text.startswith('@') &
    (F.chat.type == "private")  # –¢–æ–ª—å–∫–æ –õ–°
)
async def process_username(message: Message):
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è username (—É–¥–∞–ª—è–µ–º @ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
        username = message.text.strip().lower().replace('@', '')
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        found_user = None
        for uid, data in users.items():
            if data.get("username", "").lower() == username:
                found_user = uid
                break

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
        ])

        if not found_user:
            await message.reply(
                "‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "2. –ò–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ",
                reply_markup=kb
            )
            return

        buyer_id = message.from_user.id
        if found_user == buyer_id:
            await message.reply("üåÄ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=kb)
            return

        slave = users[found_user]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —â–∏—Ç–∞ –∑–∞—â–∏—Ç—ã
        shield_active = slave.get("shield_active")
        if isinstance(shield_active, str):
            try:
                shield_active = datetime.fromisoformat(shield_active)
            except ValueError:
                shield_active = None

        if shield_active and shield_active > datetime.now():
            shield_time = shield_active.strftime("%d.%m %H:%M")
            await message.reply(
                f"üõ° –¶–µ–ª—å –∑–∞—â–∏—â–µ–Ω–∞ —â–∏—Ç–æ–º –¥–æ {shield_time}",
                reply_markup=kb
            )
            return

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ {slave['price']}‚ÇΩ (–£—Ä. {slave.get('slave_level', 0)})", 
                    callback_data=f"{SLAVE_PREFIX}{found_user}"
                )
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
        ])

        owner_info = f"@{users[slave['owner']]['username']}" if slave.get('owner') else "–°–≤–æ–±–æ–¥–µ–Ω"
        
        await message.reply(
            f"üîé <b>–ù–∞–π–¥–µ–Ω —Ä–∞–±:</b>\n"
            f"‚ñ∏ –ù–∏–∫: @{slave['username']}\n"
            f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave.get('slave_level', 0)}\n"
            f"‚ñ∏ –¶–µ–Ω–∞: {slave['price']}‚ÇΩ\n"
            f"‚ñ∏ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_info}\n\n"
            f"üí° <i>–î–æ—Ö–æ–¥ –æ—Ç —ç—Ç–æ–≥–æ —Ä–∞–±–∞: {int(100 * (1 + 0.5 * slave.get('slave_level', 0)))}‚ÇΩ –∑–∞ —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã</i>",
            reply_markup=kb,
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

@dp.callback_query(F.data == UPGRADES)
async def upgrades_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in users:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    await callback.message.edit_text("üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ:", reply_markup=upgrades_keyboard(user_id))
    await callback.answer()

@dp.callback_query(F.data == REF_LINK)
async def ref_link_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    await callback.message.edit_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 10% —Å –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞!",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == BUY_MENU)
async def buy_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("üë• –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ–≤:", reply_markup=buy_menu_keyboard())
    await callback.answer()

@dp.callback_query(F.data == MAIN_MENU)
async def main_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    await callback.answer()

@dp.callback_query(F.data == TOP_OWNERS)
async def top_owners_handler(callback: types.CallbackQuery):
    try:
        current_user_id = callback.from_user.id
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_list = []
        for user_id, user_data in users.items():
            slaves_count = len(user_data.get("slaves", []))
            total_income = user_data.get("total_income", 0)
            efficiency = total_income / slaves_count if slaves_count > 0 else 0
            users_list.append({
                "user_id": user_id,
                "username": user_data.get("username", "Unknown"),
                "slaves": slaves_count,
                "total_income": total_income,
                "efficiency": efficiency
            })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_users = sorted(
            users_list,
            key=lambda x: x["efficiency"],
            reverse=True
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-10
        top_10 = sorted_users[:10]
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_position = None
        for idx, user in enumerate(sorted_users, 1):
            if user["user_id"] == current_user_id:
                user_position = idx
                break

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "üèÜ <b>–¢–æ–ø —Ä–∞–±–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b>\n\n"
        text += "<i>–†–µ–π—Ç–∏–Ω–≥ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –¥–æ—Ö–æ–¥ –Ω–∞ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–∞</i>\n\n"
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-10
        for idx, user in enumerate(top_10, 1):
            if user["efficiency"] > 0:
                text += (
                    f"{idx}. @{user['username']}\n"
                    f"   ‚ñ∏ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['efficiency']:.1f}‚ÇΩ/—Ä–∞–±\n"
                    f"   ‚ñ∏ –†–∞–±–æ–≤: {user['slaves']} | –î–æ—Ö–æ–¥: {user['total_income']:.1f}‚ÇΩ\n\n"
                )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_position:
            if user_position <= 10:
                text += f"\nüéâ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: {user_position}"
            else:
                user_efficiency = next((u["efficiency"] for u in sorted_users if u["user_id"] == current_user_id), 0)
                text += f"\nüìä –í–∞—à–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_efficiency:.1f}‚ÇΩ/—Ä–∞–± (–ø–æ–∑–∏—Ü–∏—è #{user_position})"
        else:
            text += "\n‚ÑπÔ∏è –í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
                ]
            ),
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logging.error(f"Top owners error: {e}", exc_info=True)
        await callback.answer("üåÄ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞", show_alert=True)
    finally:
        await callback.answer()

@dp.callback_query(F.data == "shop")
async def shop_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return

    # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã —â–∏—Ç–∞
    shield_price = calculate_shield_price(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ shield_active —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    shield_active = user.get("shield_active")
    if isinstance(shield_active, str):
        try:
            shield_active = datetime.fromisoformat(shield_active)
            user["shield_active"] = shield_active  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
        except (ValueError, TypeError):
            shield_active = None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —â–∏—Ç–∞
    shield_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if shield_active and shield_active > datetime.now() else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    text = [
        "üõí <b>–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫</b>",
        "",
        f"üõ° <b>–©–∏—Ç —Å–≤–æ–±–æ–¥—ã</b> {shield_status}",
        f"‚ñ∏ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ä–∞–±–æ—â–µ–Ω–∏—è –Ω–∞ 12—á",
        f"‚ñ∏ –¶–µ–Ω–∞: {shield_price}‚ÇΩ",
        "",
        "‚õì <b>–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–∞–Ω–¥–∞–ª—ã</b>",
        "‚ñ∏ –£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤—Ä–µ–º—è –≤—ã–∫—É–ø–∞ —Ä–∞–±–∞",
    ]
    
    buttons = [
        [InlineKeyboardButton(
            text=f"üõí –ö—É–ø–∏—Ç—å —â–∏—Ç - {shield_price}‚ÇΩ",
            callback_data=f"{SHIELD_PREFIX}{shield_price}"
        )],
        [InlineKeyboardButton(
            text="‚õì –í—ã–±—Ä–∞—Ç—å —Ä–∞–±–∞ –¥–ª—è –∫–∞–Ω–¥–∞–ª",
            callback_data="select_shackles"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ]
    
    await callback.message.edit_text(
        "\n".join(text),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data.startswith(UPGRADE_PREFIX))
async def upgrade_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        upgrade_id = callback.data.replace(UPGRADE_PREFIX, "")
        
        if user_id not in users:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return

        user = users[user_id]
        upgrade_data = upgrades.get(upgrade_id)
        
        if not upgrade_data:
            await callback.answer("‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        current_level = user.get("upgrades", {}).get(upgrade_id, 0)
        price = upgrade_data["base_price"] * (current_level + 1)
        
        if user.get("balance", 0) < price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        user["balance"] -= price
        user.setdefault("upgrades", {})[upgrade_id] = current_level + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è —Å–∫–ª–∞–¥–∞
        if upgrade_id == "storage":
            user["income_per_sec"] = (1 + user["upgrades"].get("storage", 0) * 10) / 60

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        save_db()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await callback.message.edit_reply_markup(
                reply_markup=upgrades_keyboard(user_id)
            )
            await callback.answer(f"‚úÖ {upgrade_data['name']} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {current_level + 1}!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
            await callback.answer("‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–ª—É—á—à–µ–Ω–∏–π: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith(SHIELD_PREFIX))
async def buy_shield(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    price = int(callback.data.replace(SHIELD_PREFIX, ""))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    current_shield = user.get("shield_active")
    if current_shield and isinstance(current_shield, str):
        try:
            current_shield = datetime.fromisoformat(current_shield)
            user["shield_active"] = current_shield
        except ValueError:
            current_shield = None
    
    if current_shield and current_shield > datetime.now():
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —â–∏—Ç!", show_alert=True)
        return
        
    if user.get("balance", 0) < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    user["balance"] -= price
    user["shield_active"] = datetime.now() + timedelta(hours=12)
    user["shop_purchases"] = user.get("shop_purchases", 0) + 1
    save_db()
    
    await callback.answer(f"üõ° –©–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {user['shield_active'].strftime('%H:%M')}!", show_alert=True)
    await shop_handler(callback)
    
@dp.callback_query(F.data == "play_21")
async def play_21_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = users.get(user_id)
        
        if user_id in active_games:
            await callback.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É!", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏
        builder = InlineKeyboardBuilder()
        bets = [500, 1000, 2000, 5000]
        for bet in bets:
            builder.add(types.InlineKeyboardButton(
                text=f"{bet}‚ÇΩ", 
                callback_data=f"bj_bet_{bet}"
            ))
        builder.adjust(2)
        
        await callback.message.edit_text(
            "üé∞ <b>–ò–≥—Ä–∞ 21 (Blackjack)</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:",
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"Play 21 error: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã", show_alert=True)


@dp.message(Command("bj_stop"))
async def stop_blackjack(message: types.Message):
    user_id = message.from_user.id
    if user_id in active_games:
        del active_games[user_id]
        await message.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä")

@dp.callback_query(F.data.startswith("bj_bet_"))
async def blackjack_bet_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        bet = int(callback.data.split("_")[2])
        
        if user_id in active_games:
            await callback.answer("–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É!", show_alert=True)
            return
        
        if users[user_id]["balance"] < bet:
            await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        game = BlackjackGame(user_id, bet)
        game.start_game()
        active_games[user_id] = game
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await game.update_display(callback.message, bot)
        await callback.answer()
    except Exception as e:
        logging.error(f"Bet handler error: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞–≤–∫–µ", show_alert=True)

@dp.callback_query(F.data == "select_shackles")
async def select_shackles(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user or not user.get("slaves"):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ–≤!", show_alert=True)
        return
    
    buttons = []
    for slave_id in user["slaves"][:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–µ—Ä–≤—ã—Ö —Ä–∞–±–æ–≤
        slave = users.get(slave_id, {})
        price = calculate_shackles_price(slave_id)
        buttons.append([
            InlineKeyboardButton(
                text=f"‚õì @{slave.get('username', 'unknown')} - {price}‚ÇΩ",
                callback_data=f"{SHACKLES_PREFIX}{slave_id}_{price}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop")])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∞–ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ (/fix_economy), —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã

@dp.callback_query(F.data.startswith(SHACKLES_PREFIX))
async def buy_shackles(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    _, slave_id, price = callback.data.split("_")
    slave_id = int(slave_id)
    price = int(price)
    
    if slave_id not in user.get("slaves", []):
        await callback.answer("‚ùå –≠—Ç–æ—Ç —Ä–∞–± –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!", show_alert=True)
        return
        
    if user.get("balance", 0) < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–Ω–¥–∞–ª—ã
    user["balance"] -= price
    if "shackles" not in user:
        user["shackles"] = {}
    user["shackles"][slave_id] = datetime.now() + timedelta(hours=24)
    save_db()
    
    await callback.answer(
        f"‚õì –ö–∞–Ω–¥–∞–ª—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ @{users[slave_id].get('username', 'unknown')} –Ω–∞ 24—á!",
        show_alert=True
    )
    await select_shackles(callback)  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É

@dp.callback_query(F.data.startswith(SLAVE_PREFIX))
async def buy_slave_handler(callback: types.CallbackQuery):
    try:
        buyer_id = callback.from_user.id
        slave_id = int(callback.data.replace(SLAVE_PREFIX, ""))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if buyer_id not in users or slave_id not in users:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        buyer = users[buyer_id]
        slave = users[slave_id]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ä–∞–±–æ–≤
        barracks_level = buyer.get("upgrades", {}).get("barracks", 0)
        slave_limit = 5 + 2 * barracks_level
        if len(buyer.get("slaves", [])) >= slave_limit:
            await callback.answer(
                f"‚ùå –õ–∏–º–∏—Ç —Ä–∞–±–æ–≤ ({slave_limit}). –£–ª—É—á—à–∏—Ç–µ –±–∞—Ä–∞–∫–∏!",
                show_alert=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —â–∏—Ç–∞ –∑–∞—â–∏—Ç—ã
        shield_active = slave.get("shield_active")
        if isinstance(shield_active, str):
            try:
                shield_active = datetime.fromisoformat(shield_active)
            except ValueError:
                shield_active = None

        if shield_active and shield_active > datetime.now():
            shield_time = shield_active.strftime("%d.%m %H:%M")
            await callback.answer(
                f"üõ° –¶–µ–ª—å –∑–∞—â–∏—â–µ–Ω–∞ —â–∏—Ç–æ–º –¥–æ {shield_time}",
                show_alert=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
        if slave.get("last_purchased"):
            cooldown = timedelta(hours=3)
            if datetime.now() - slave["last_purchased"] < cooldown:
                remaining = cooldown - (datetime.now() - slave["last_purchased"])
                hours = remaining.seconds // 3600
                minutes = (remaining.seconds % 3600) // 60
                await callback.answer(
                    f"‚åõ –†–∞–± –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∫—É–ø–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º",
                    show_alert=True
                )
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if slave_id == buyer_id:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–∞–±—Å—Ç–≤–∞
        if buyer.get("owner") == slave_id:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–≤–æ–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –≤–ª–∞–¥–µ–Ω–∏—è
        if slave.get("owner") == buyer_id:
            await callback.answer("‚ùå –≠—Ç–æ—Ç —Ä–∞–± —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        previous_owner_id = slave.get("owner")
        if previous_owner_id and previous_owner_id != buyer_id:
            await callback.answer(
                f"‚ùå –†–∞–± –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç @{users[previous_owner_id].get('username', 'unknown')}",
                show_alert=True
            )
            return

        price = slave_price(slave)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if buyer["balance"] < price:
            await callback.answer(
                f"‚ùå –ù—É–∂–Ω–æ {price}‚ÇΩ (—É –≤–∞—Å {buyer['balance']:.0f}‚ÇΩ)",
                show_alert=True
            )
            return

        # –õ–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
        if previous_owner_id:
            previous_owner = users[previous_owner_id]
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if slave_id in previous_owner.get("slaves", []):
                previous_owner["slaves"].remove(slave_id)
            
            # –ö–æ–º–∏—Å—Å–∏—è 30% –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
            commission = int(price * 0.3)
            previous_owner["balance"] += commission
            previous_owner["total_income"] += commission

            # –°–Ω–∏–º–∞–µ–º –∫–∞–Ω–¥–∞–ª—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if "shackles" in previous_owner and slave_id in previous_owner["shackles"]:
                del previous_owner["shackles"][slave_id]

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        buyer["balance"] -= price
        buyer.setdefault("slaves", []).append(slave_id)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–∞
        current_level = slave.get("slave_level", 0)
        slave["owner"] = buyer_id
        slave["slave_level"] = min(current_level + 1, MAX_SLAVE_LEVEL)
        slave["price"] = slave_price(slave)
        slave["enslaved_date"] = datetime.now()
        slave["last_purchased"] = datetime.now()  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        msg = [
            f"‚úÖ –ö—É–ø–ª–µ–Ω @{slave.get('username', '–±–µ–∑—ã–º—è–Ω–Ω—ã–π')} –∑–∞ {price}‚ÇΩ",
            f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave['slave_level']}",
            f"‚ñ∏ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {slave['price']}‚ÇΩ",
            f"‚ñ∏ –î–æ—Ö–æ–¥/—á–∞—Å: {int(100 * (1 + 0.3 * slave['slave_level']))}‚ÇΩ",
            f"‚ñ∏ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∫—É–ø–∞: 3 —á–∞—Å–∞"
        ]
        
        if previous_owner_id:
            msg.append(f"‚ñ∏ –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {commission}‚ÇΩ")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–∞
        try:
            await bot.send_message(
                slave_id,
                f"‚ö° –í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω—ã @{buyer.get('username', 'unknown')} "
                f"–∑–∞ {price}‚ÇΩ (—É—Ä–æ–≤–µ–Ω—å {slave['slave_level']})\n"
                f"‚ñ∏ –ù–æ–≤—ã–π –¥–æ—Ö–æ–¥: {int(100 * (1 + 0.3 * slave['slave_level']))}‚ÇΩ/—á–∞—Å"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±—É: {e}")

        save_db()
        await callback.message.edit_text("\n".join(msg), reply_markup=main_keyboard())
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–∞: {e}", exc_info=True)
        save_db()
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", show_alert=True)


@dp.callback_query(F.data.startswith(BUYOUT_PREFIX))
async def buyout_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = users.get(user_id)
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not user:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return
            
        if not user.get("owner"):
            await callback.answer("‚ùå –í—ã –∏ —Ç–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∞–ª–æ–≤
        owner = users.get(user["owner"], {})
        if owner.get("shackles", {}).get(user_id):
            shackles_end = owner["shackles"][user_id].strftime("%d.%m %H:%M")
            await callback.answer(
                f"‚õì –í—ã –≤ –∫–∞–Ω–¥–∞–ª–∞—Ö –¥–æ {shackles_end}!\n"
                f"–í—ã–∫—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω",
                show_alert=True
            )
            return

        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –≤—ã–∫—É–ø–∞
        base_price = user.get("base_price", 100)
        slave_level = user.get("slave_level", 0)
        
        # –§–æ—Ä–º—É–ª–∞: (–±–∞–∑–∞ + 5% –∫–∞–ø–∏—Ç–∞–ª–∞) * (1 + 0.3 –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
        buyout_price = int(
            (base_price + user["balance"] * 0.05) * 
            (1 + slave_level * 0.3)
        )
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ü–µ–Ω—ã
        buyout_price = max(100, min(20000, buyout_price))  # 100-20k
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (—Å –∑–∞–ø–∞—Å–æ–º 1%)
        if user["balance"] < buyout_price * 0.99:
            await callback.answer(
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {buyout_price - user['balance']:.0f}‚ÇΩ\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {buyout_price}‚ÇΩ",
                show_alert=True
            )
            return

        # –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–∫—É–ø–∞
        owner_id = user["owner"]
        user["balance"] -= buyout_price
        user["owner"] = None
        user["price"] = base_price  # –°–±—Ä–æ—Å —Ü–µ–Ω—ã
        
        # –í–ª–∞–¥–µ–ª–µ—Ü –ø–æ–ª—É—á–∞–µ—Ç 60% –æ—Ç –≤—ã–∫—É–ø–∞ (–≤–º–µ—Å—Ç–æ 50%)
        if owner_id in users:
            owner_income = int(buyout_price * 0.6)
            users[owner_id]["balance"] += owner_income
            users[owner_id]["total_income"] += owner_income
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ–≤
            if user_id in users[owner_id].get("slaves", []):
                users[owner_id]["slaves"].remove(user_id)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            try:
                await bot.send_message(
                    owner_id,
                    f"üîì –†–∞–± @{user.get('username', 'unknown')} "
                    f"–≤—ã–∫—É–ø–∏–ª—Å—è –∑–∞ {buyout_price}‚ÇΩ\n"
                    f"–í–∞—à –¥–æ—Ö–æ–¥: {owner_income}‚ÇΩ"
                )
            except Exception:
                pass

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user["total_spent"] = user.get("total_spent", 0) + buyout_price
        user["buyout_count"] = user.get("buyout_count", 0) + 1
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await callback.message.edit_text(
            f"üéâ <b>–í—ã —Å–≤–æ–±–æ–¥–Ω—ã!</b>\n"
            f"‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {buyout_price}‚ÇΩ\n"
            f"‚ñ∏ –°–æ—Ö—Ä–∞–Ω—ë–Ω —É—Ä–æ–≤–µ–Ω—å: {slave_level}\n"
            f"‚ñ∏ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price}‚ÇΩ\n\n"
            f"<i>–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –ø–ª–∞—Ç–∏—Ç–µ 30% –Ω–∞–ª–æ–≥ –≤–ª–∞–¥–µ–ª—å—Ü—É</i>",
            reply_markup=main_keyboard(),
            parse_mode=ParseMode.HTML
        )
        
        save_db()
        await callback.answer()

    except Exception as e:
        logging.error(f"Buyout error: {e}", exc_info=True)
        await callback.answer("üåÄ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫—É–ø–µ", show_alert=True)
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(F.data == PROFILE)
async def profile_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = users.get(user_id)
        
        if not user:
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤—ã–∫—É–ø–∞
        buyout_price = 0
        if user.get("owner"):
            base_price = user.get("base_price", 100)
            buyout_price = int((base_price + user["balance"] * 0.1) * (1 + user.get("slave_level", 0) * 0.5))
            buyout_price = max(100, min(10000, buyout_price))
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–Ω–∏ —É–ª—É—á—à–µ–Ω–∏–π
        barracks_level = user.get("upgrades", {}).get("barracks", 0)
        whip_level = user.get("upgrades", {}).get("whip", 0)
        storage_level = user.get("upgrades", {}).get("storage", 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É
        passive_per_min = 1 + storage_level * 10  # –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥ + —Å–∫–ª–∞–¥
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤ (—Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–∞ 30% –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Ä–∞–±)
        slave_income = 0
        for slave_id in user.get("slaves", []):
            if slave_id in users:
                slave = users[slave_id]
                slave_income += 100 * (1 + 0.3 * slave.get("slave_level", 0))
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Ä–∞–±, –≤—ã—á–∏—Ç–∞–µ–º –Ω–∞–ª–æ–≥ 30%
        if user.get("owner"):
            passive_per_min += slave_income * 0.7 / 60
        else:
            passive_per_min += slave_income / 60
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = [
            f"üëë <b>–ü—Ä–æ—Ñ–∏–ª—å @{user.get('username', 'unknown')}</b>",
            f"‚ñ∏ üí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0):.1f}‚ÇΩ",
            f"‚ñ∏ üí∏ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {passive_per_min:.1f}‚ÇΩ/–º–∏–Ω ({passive_per_min*60:.1f}‚ÇΩ/—á–∞—Å)",
            f"‚ñ∏ üë• –£—Ä–æ–≤–µ–Ω—å —Ä–∞–±–∞: {user.get('slave_level', 0)}",
            f"‚ñ∏ üõ† –£–ª—É—á—à–µ–Ω–∏—è: {sum(user.get('upgrades', {}).values())}",
            f"‚ñ∏ üì¶ –°–∫–ª–∞–¥: —É—Ä. {storage_level} (+{storage_level * 10}‚ÇΩ/–º–∏–Ω)",
            f"‚ñ∏ üè† –ë–∞—Ä–∞–∫–∏: —É—Ä. {barracks_level} (–ª–∏–º–∏—Ç {5 + 2 * barracks_level})",
            f"‚ñ∏ ‚õì –ö–Ω—É—Ç—ã: —É—Ä. {whip_level} (–Ω–∞–ª–æ–≥ {10 + 2 * whip_level}%)"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –ø–µ—Ä–µ–ø–æ–∫—É–ø–∫–∏ (–ù–û–í–´–ô –ë–õ–û–ö)
        if user.get("last_purchased"):
            cooldown = timedelta(hours=3)
            time_left = cooldown - (datetime.now() - user["last_purchased"])
            if time_left.total_seconds() > 0:
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)
                text.append(f"\n‚è≥ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–∫—É–ø–∞: {hours}—á {minutes}–º")
        
        if user.get("owner"):
            owner = users.get(user["owner"], {})
            text.append(
                f"\n‚ö†Ô∏è <b>–ù–∞–ª–æ–≥ —Ä–∞–±—Å—Ç–≤–∞:</b> 30% –¥–æ—Ö–æ–¥–∞ ‚Üí @{owner.get('username', 'unknown')}\n"
                f"‚ñ∏ –¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: {buyout_price}‚ÇΩ"
            )
        else:
            text.append("\nüîó –í—ã —Å–≤–æ–±–æ–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫")
            
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–∫—É–ø–∞
        keyboard = []
        if user.get("owner"):
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üÜì –í—ã–∫—É–ø–∏—Ç—å—Å—è –∑–∞ {buyout_price}‚ÇΩ",
                    callback_data=f"{BUYOUT_PREFIX}{buyout_price}"
                )
            ])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
        
        await callback.message.edit_text(
            "\n".join(text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)

async def autosave_task():
    while True:
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
        save_db()
        
async def on_startup():
    global users
    users = load_db()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    asyncio.create_task(passive_income_task())
    asyncio.create_task(autosave_task())
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–î –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    import signal
    import functools
    def save_on_exit(*args):
        save_db()
    
    signal.signal(signal.SIGTERM, save_on_exit)
    signal.signal(signal.SIGINT, save_on_exit)
    
async def on_shutdown():
    save_db() 


async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler("bot.log", encoding='utf-8')
            ]
        )
        logger = logging.getLogger(__name__)
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await on_startup()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        await on_shutdown()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        # –î–ª—è Windows –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π event loop
        if os.name == 'nt':
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
            
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
