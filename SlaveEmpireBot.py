import logging
import asyncio
import os
import psycopg2
from psycopg2.extras import Json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPGRADE_PREFIX = "upg_"
SLAVE_PREFIX = "slv_"
MAIN_MENU = "main_menu"
WORK = "work"
UPGRADES = "upgrades"
PROFILE = "profile"
REF_LINK = "ref_link"
BUY_MENU = "buy_menu"
CHECK_SUB = "check_sub_"
SEARCH_USER = "search_user"
TOP_OWNERS = "top_owners"
BUYOUT_PREFIX = "buyout_"
SHIELD_PREFIX = "shield_"
SHACKLES_PREFIX = "shackles_"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –£–ª—É—á—à–µ–Ω–∏—è
upgrades = {
    "storage": {
        "name": "üì¶ –°–∫–ª–∞–¥",
        "base_price": 500,
        "income_bonus": 10,
        "description": "+10 –º–æ–Ω–µ—Ç/–º–∏–Ω –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É"
    },
    "whip": {
        "name": "‚õì –ö–Ω—É—Ç—ã", 
        "base_price": 1000,
        "income_bonus": 25,
        "description": "+25% –∫ –¥–æ—Ö–æ–¥—É –æ—Ç —Ä–∞–±–æ—Ç—ã"
    },
    "food": {
        "name": "üçó –ï–¥–∞",
        "base_price": 2000,
        "income_bonus": 50,
        "description": "-10% –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"
    },
    "barracks": {
        "name": "üè† –ë–∞—Ä–∞–∫–∏",
        "base_price": 5000,
        "income_bonus": 100,
        "description": "+5 –∫ –ª–∏–º–∏—Ç—É —Ä–∞–±–æ–≤"
    }
}

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    return psycopg2.connect(os.getenv("DATABASE_URL"))

def get_user(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT data FROM bot_users WHERE user_id = %s", (user_id,))
            result = cur.fetchone()
            if result:
                return deserialize_user_data(result[0])
            return None
    finally:
        conn.close()

def create_user(user_id: int, username: str, referrer_id: int = None) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    new_user = {
        "balance": 100,
        "slaves": [],
        "owner": None,
        "base_price": 100,
        "enslaved_date": None,
        "slave_level": 0,
        "price": 100,
        "last_work": None,
        "upgrades": {key: 0 for key in upgrades},
        "total_income": 0,
        "username": username,
        "shield_active": None,
        "shackles": {},
        "shop_purchases": 0,
        "last_passive": datetime.now(),
        "income_per_sec": 0.0167,
        "referrer": referrer_id,
        "registered": True
    }
    
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO bot_users (user_id, data) VALUES (%s, %s)",
                (user_id, Json(serialize_user_data(new_user)))
            )
            conn.commit()
    finally:
        conn.close()
    
    return new_user

def update_user(user_id: int, user_data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute(
                "UPDATE bot_users SET data = %s WHERE user_id = %s",
                (Json(serialize_user_data(user_data)), user_id)
            conn.commit()
    finally:
        conn.close()

def serialize_user_data(user_data: dict) -> dict:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç datetime –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON"""
    return {k: v.isoformat() if isinstance(v, datetime) else v 
            for k, v in user_data.items()}

def deserialize_user_data(data: dict) -> dict:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç datetime –∏–∑ —Å—Ç—Ä–æ–∫"""
    deserialized = {}
    for key, value in data.items():
        if key in ['last_passive', 'last_work'] and value:
            try:
                deserialized[key] = datetime.fromisoformat(value)
            except (TypeError, ValueError):
                deserialized[key] = datetime.now()
        else:
            deserialized[key] = value
    return deserialized

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data=WORK)],
        [
            InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data=UPGRADES),
            InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE)
        ],
        [
            InlineKeyboardButton(text="üë• –ö—É–ø–∏—Ç—å —Ä–∞–±–∞", callback_data=BUY_MENU),
            InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
        ],
        [    
            InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data=REF_LINK),
            InlineKeyboardButton(text="üèÜ –¢–æ–ø –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤", callback_data=TOP_OWNERS)
        ]
    ])

def upgrades_keyboard(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ª—É—á—à–µ–Ω–∏–π"""
    user = get_user(user_id)
    buttons = []
    for upgrade_id, data in upgrades.items():
        level = user.get("upgrades", {}).get(upgrade_id, 0)
        price = data["base_price"] * (level + 1)
        buttons.append([
            InlineKeyboardButton(
                text=f"{data['name']} (–£—Ä. {level}) - {price}‚ÇΩ | {data['description']}",
                callback_data=f"{UPGRADE_PREFIX}{upgrade_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def buy_menu_keyboard():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data=SEARCH_USER)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ])

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_subscription(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def passive_income_task():
    """–ó–∞–¥–∞—á–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    while True:
        await asyncio.sleep(60)
        conn = get_db_connection()
        try:
            with conn.cursor() as cur:
                cur.execute("SELECT user_id, data FROM bot_users")
                for user_id, data in cur.fetchall():
                    user = deserialize_user_data(data)
                    now = datetime.now()
                    
                    if "last_passive" not in user:
                        continue
                        
                    mins_passed = (now - user["last_passive"]).total_seconds() / 60
                    mins_passed = min(mins_passed, 24 * 60)  # –ù–µ –±–æ–ª—å—à–µ —Å—É—Ç–æ–∫
                    
                    # –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥
                    base_income = 1 * mins_passed
                    
                    # –î–æ—Ö–æ–¥ –æ—Ç —Å–∫–ª–∞–¥–∞
                    storage_income = user.get("upgrades", {}).get("storage", 0) * 10 * mins_passed
                    
                    # –î–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ–≤ (—Å –Ω–∞–ª–æ–≥–æ–º 20%)
                    slaves_income = 0
                    for slave_id in user.get("slaves", []):
                        slave = get_user(slave_id)
                        if slave:
                            slave_income = 100 * (1 + 0.3 * slave.get("slave_level", 0)) * mins_passed
                            tax = int(slave_income * 0.2)
                            slave["balance"] += slave_income - tax
                            update_user(slave_id, slave)
                            slaves_income += tax
                    
                    total_income = base_income + storage_income + slaves_income
                    user["balance"] += total_income
                    user["total_income"] += total_income
                    user["last_passive"] = now
                    
                    update_user(user_id, user)
        finally:
            conn.close()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –ü–æ–ª—É—á–∞–µ–º referrer_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    referrer_id = None
    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤ –±–∞–∑–µ
            if referrer_id == user_id or not get_user(referrer_id):
                referrer_id = None
        except (ValueError, IndexError):
            referrer_id = None

    if not await check_subscription(user_id):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –±–∞–∑–µ
        if referrer_id:
            temp_user = {
                "referrer": referrer_id,
                "registered": False
            }
            update_user(user_id, temp_user)
            
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"{CHECK_SUB}{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return
    
    user = get_user(user_id)
    if not user or not user.get("registered"):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = create_user(user_id, username, referrer_id)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É
        if referrer_id:
            referrer = get_user(referrer_id)
            if referrer:
                bonus = 50
                referrer["balance"] += bonus
                referrer["total_income"] += bonus
                update_user(referrer_id, referrer)
                
                try:
                    await bot.send_message(
                        referrer_id,
                        f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus}‚ÇΩ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ @{username}!"
                    )
                except Exception:
                    pass

        welcome_msg = (
            "üëë <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –†–ê–ë–û–í–õ–ê–î–ï–õ–¨–ß–ï–°–ö–£–Æ –ò–ú–ü–ï–†–ò–Æ!</b>\n\n"
            "‚ö°Ô∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚ñ∏ üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (—Ä–∞–∑ –≤ 20 –º–∏–Ω)\n"
            "‚ñ∏ üõ† –£–ª—É—á—à–∞–π —Å–≤–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è\n"
            "‚ñ∏ üë• –ü–æ–∫—É–ø–∞–π —Ä–∞–±–æ–≤ –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n\n"
        )
        
        if referrer_id:
            referrer = get_user(referrer_id)
            referrer_name = referrer.get("username", "–¥—Ä—É–≥") if referrer else "–¥—Ä—É–≥"
            welcome_msg += f"ü§ù –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: @{referrer_name}\n\n"
        
        welcome_msg += "üí∞ <b>–ë–∞–∑–æ–≤–∞—è –ø–∞—Å—Å–∏–≤–∫–∞:</b> 1‚ÇΩ/–º–∏–Ω"
        await message.answer(welcome_msg, reply_markup=main_keyboard(), parse_mode=ParseMode.HTML)
    else:
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@dp.callback_query(F.data.startswith(CHECK_SUB))
async def check_sub_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.replace(CHECK_SUB, ""))
    
    if await check_subscription(user_id):
        user = get_user(user_id)
        if not user or not user.get("registered"):
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = callback.from_user.username
            new_user = create_user(user_id, username, user.get("referrer") if user else None)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª—É
            referrer_id = new_user.get("referrer")
            if referrer_id:
                referrer = get_user(referrer_id)
                if referrer:
                    bonus = 50
                    referrer["balance"] += bonus
                    referrer["total_income"] += bonus
                    update_user(referrer_id, referrer)

        await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await callback.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == SEARCH_USER)
async def search_user_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ @username –∏–≥—Ä–æ–∫–∞ (–º–æ–∂–Ω–æ —Å —Å–æ–±–∞–∫–æ–π):\n"
        "–ü—Ä–∏–º–µ—Ä: <code>@username123</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <code>username123</code>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –í –º–µ–Ω—é –ø–æ–∫—É–ø–æ–∫", callback_data=BUY_MENU)]]
        ),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data == WORK)
async def work_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if not user or not user.get("registered"):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    now = datetime.now()
    cooldown = timedelta(minutes=20)
    
    if user["last_work"] and (now - user["last_work"]) < cooldown:
        remaining = (user["last_work"] + cooldown - now).seconds // 60
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining} –º–∏–Ω—É—Ç", show_alert=True)
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
    passive_per_min = 1 + user.get("upgrades", {}).get("storage", 0) * 10
    passive_per_min += sum(
        100 * (1 + 0.3 * get_user(slave_id).get("slave_level", 0)) / 60
        for slave_id in user.get("slaves", [])
    )
    
    # –ë–æ–Ω—É—Å —Ä–∞–±–æ—Ç—ã
    whip_bonus = 1 + user.get("upgrades", {}).get("whip", 0) * 0.25
    work_bonus = passive_per_min * 20 * whip_bonus
    
    user["balance"] += work_bonus
    user["total_income"] += work_bonus
    user["last_work"] = now
    update_user(user_id, user)
    
    await callback.message.edit_text(
        f"üíº –ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞: {work_bonus:.1f}‚ÇΩ\n"
        f"‚ñ∏ –≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 20 –º–∏–Ω—É—Ç –ø–∞—Å—Å–∏–≤–∫–∏!\n"
        f"‚ñ∏ –í–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Å—Å–∏–≤/–º–∏–Ω: {passive_per_min:.1f}‚ÇΩ",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.message(F.text & ~F.text.startswith('/'))
async def process_username(message: Message):
    username = message.text.strip().lower().replace('@', '')
    
    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute(
                "SELECT user_id, data FROM bot_users WHERE data->>'username' ILIKE %s",
                (username,)
            result = cur.fetchone()
    finally:
        conn.close()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])

    if not result:
        await message.reply("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb)
        return

    slave_id, slave_data = result
    slave = deserialize_user_data(slave_data)
    buyer_id = message.from_user.id

    if slave_id == buyer_id:
        await message.reply("üåÄ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", reply_markup=kb)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–µ
    owner_info = "–°–≤–æ–±–æ–¥–µ–Ω"
    if slave.get('owner'):
        owner = get_user(slave['owner'])
        owner_info = f"@{owner['username']}" if owner else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ {slave['price']}‚ÇΩ (–£—Ä. {slave.get('slave_level', 0)})", 
            callback_data=f"{SLAVE_PREFIX}{slave_id}"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])
    
    await message.reply(
        f"üîé <b>–ù–∞–π–¥–µ–Ω —Ä–∞–±:</b>\n"
        f"‚ñ∏ –ù–∏–∫: @{slave['username']}\n"
        f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave.get('slave_level', 0)}\n"
        f"‚ñ∏ –¶–µ–Ω–∞: {slave['price']}‚ÇΩ\n"
        f"‚ñ∏ –í–ª–∞–¥–µ–ª–µ—Ü: {owner_info}\n\n"
        f"üí° <i>–î–æ—Ö–æ–¥ –æ—Ç —ç—Ç–æ–≥–æ —Ä–∞–±–∞: {int(100 * (1 + 0.5 * slave.get('slave_level', 0))}‚ÇΩ –∑–∞ —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã</i>",
        reply_markup=kb,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(F.data == TOP_OWNERS)
async def top_owners_handler(callback: types.CallbackQuery):
    try:
        conn = get_db_connection()
        with conn.cursor() as cur:
            cur.execute("SELECT data FROM bot_users")
            users_list = [
                {
                    "user_id": row[0]['user_id'],
                    "username": row[0].get('username', 'Unknown'),
                    "slaves": len(row[0].get('slaves', [])),
                    "total_income": row[0].get('total_income', 0),
                    "efficiency": row[0].get('total_income', 0) / len(row[0].get('slaves', [1])) 
                        if len(row[0].get('slaves', [])) > 0 else 0
                }
                for row in cur.fetchall()
            ]
            
        sorted_users = sorted(
            users_list,
            key=lambda x: x["efficiency"],
            reverse=True
        )
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–æ–ø–∞...
        # [–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç sorted_users –∏–∑ –ë–î]
        
    except Exception as e:
        logging.error(f"Top owners error: {e}", exc_info=True)
        await callback.answer("üåÄ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞", show_alert=True)

@dp.callback_query(F.data == "shop")
async def shop_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if not user or not user.get("registered"):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return

    shield_price = calculate_shield_price(user_id)
    shield_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.get("shield_active") and user["shield_active"] > datetime.now() else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    text = [
        "üõí <b>–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Ä—ã–Ω–æ–∫</b>",
        "",
        f"üõ° <b>–©–∏—Ç —Å–≤–æ–±–æ–¥—ã</b> {shield_status}",
        f"‚ñ∏ –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ä–∞–±–æ—â–µ–Ω–∏—è –Ω–∞ 12—á",
        f"‚ñ∏ –¶–µ–Ω–∞: {shield_price}‚ÇΩ",
        "",
        "‚õì <b>–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–∞–Ω–¥–∞–ª—ã</b>",
        "‚ñ∏ –£–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤—Ä–µ–º—è –≤—ã–∫—É–ø–∞ —Ä–∞–±–∞",
    ]
    
    buttons = [
        [InlineKeyboardButton(
            text=f"üõí –ö—É–ø–∏—Ç—å —â–∏—Ç - {shield_price}‚ÇΩ",
            callback_data=f"{SHIELD_PREFIX}{shield_price}"
        )],
        [InlineKeyboardButton(
            text="‚õì –í—ã–±—Ä–∞—Ç—å —Ä–∞–±–∞ –¥–ª—è –∫–∞–Ω–¥–∞–ª",
            callback_data="select_shackles"
        )],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)]
    ]
    
    await callback.message.edit_text(
        "\n".join(text),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data.startswith(UPGRADE_PREFIX))
async def upgrade_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        upgrade_id = callback.data.replace(UPGRADE_PREFIX, "")
        
        user = get_user(user_id)
        if not user or not user.get("registered"):
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return

        upgrade_data = upgrades.get(upgrade_id)
        if not upgrade_data:
            await callback.answer("‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        current_level = user.get("upgrades", {}).get(upgrade_id, 0)
        price = upgrade_data["base_price"] * (current_level + 1)
        
        if user.get("balance", 0) < price:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        user["balance"] -= price
        user.setdefault("upgrades", {})[upgrade_id] = current_level + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –¥–ª—è —Å–∫–ª–∞–¥–∞
        if upgrade_id == "storage":
            user["income_per_sec"] = (1 + user["upgrades"].get("storage", 0) * 10) / 60

        update_user(user_id, user)

        try:
            await callback.message.edit_reply_markup(
                reply_markup=upgrades_keyboard(user_id)
            )
            await callback.answer(f"‚úÖ {upgrade_data['name']} —É–ª—É—á—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è {current_level + 1}!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
            await callback.answer("‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–ª—É—á—à–µ–Ω–∏–π: {str(e)}", exc_info=True)
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith(SHIELD_PREFIX))
async def buy_shield(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    price = int(callback.data.replace(SHIELD_PREFIX, ""))
    
    if not user or not user.get("registered"):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    if user.get("shield_active") and user["shield_active"] > datetime.now():
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —â–∏—Ç!", show_alert=True)
        return
        
    if user.get("balance", 0) < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    user["balance"] -= price
    user["shield_active"] = datetime.now() + timedelta(hours=12)
    user["shop_purchases"] = user.get("shop_purchases", 0) + 1
    update_user(user_id, user)
    
    await callback.answer(f"üõ° –©–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ {user['shield_active'].strftime('%H:%M')}!", show_alert=True)
    await shop_handler(callback)

@dp.callback_query(F.data == "select_shackles")
async def select_shackles(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if not user or not user.get("slaves"):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ–≤!", show_alert=True)
        return
    
    buttons = []
    for slave_id in user["slaves"][:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–∞–±–∞–º–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        slave = get_user(slave_id)
        if slave:
            price = calculate_shackles_price(slave_id)
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚õì @{slave.get('username', 'unknown')} - {price}‚ÇΩ",
                    callback_data=f"{SHACKLES_PREFIX}{slave_id}_{price}"
                )
            ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="shop")])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∞–ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith(SHACKLES_PREFIX))
async def buy_shackles(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    _, slave_id, price = callback.data.split("_")
    slave_id = int(slave_id)
    price = int(price)
    
    if not user or slave_id not in user.get("slaves", []):
        await callback.answer("‚ùå –≠—Ç–æ—Ç —Ä–∞–± –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!", show_alert=True)
        return
        
    if user.get("balance", 0) < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–Ω–¥–∞–ª—ã
    user["balance"] -= price
    if "shackles" not in user:
        user["shackles"] = {}
    user["shackles"][slave_id] = datetime.now() + timedelta(hours=24)
    update_user(user_id, user)
    
    slave = get_user(slave_id)
    slave_name = slave.get("username", "unknown") if slave else "unknown"
    
    await callback.answer(
        f"‚õì –ö–∞–Ω–¥–∞–ª—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ @{slave_name} –Ω–∞ 24—á!",
        show_alert=True
    )
    await select_shackles(callback)

@dp.callback_query(F.data.startswith(SLAVE_PREFIX))
async def buy_slave_handler(callback: types.CallbackQuery):
    try:
        buyer_id = callback.from_user.id
        slave_id = int(callback.data.replace(SLAVE_PREFIX, ""))
        
        buyer = get_user(buyer_id)
        slave = get_user(slave_id)
        
        if not buyer or not buyer.get("registered") or not slave:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —â–∏—Ç–∞ –∑–∞—â–∏—Ç—ã
        if slave.get("shield_active") and slave["shield_active"] > datetime.now():
            shield_time = slave["shield_active"].strftime("%d.%m %H:%M")
            await callback.answer(
                f"üõ° –¶–µ–ª—å –∑–∞—â–∏—â–µ–Ω–∞ —â–∏—Ç–æ–º –¥–æ {shield_time}",
                show_alert=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if slave_id == buyer_id:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–∞–±—Å—Ç–≤–∞
        if buyer.get("owner") == slave_id:
            await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–≤–æ–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –≤–ª–∞–¥–µ–Ω–∏—è
        if slave.get("owner") == buyer_id:
            await callback.answer("‚ùå –≠—Ç–æ—Ç —Ä–∞–± —É–∂–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        previous_owner_id = slave.get("owner")
        if previous_owner_id and previous_owner_id != buyer_id:
            previous_owner = get_user(previous_owner_id)
            owner_name = previous_owner.get("username", "unknown") if previous_owner else "unknown"
            await callback.answer(
                f"‚ùå –†–∞–± –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç @{owner_name}",
                show_alert=True
            )
            return

        price = slave.get("price", 100)
        
        if buyer.get("balance", 0) < price * 0.99:
            await callback.answer(
                f"‚ùå –ù—É–∂–Ω–æ {price}‚ÇΩ (—É –≤–∞—Å {buyer['balance']:.0f}‚ÇΩ)",
                show_alert=True
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        conn = get_db_connection()
        try:
            with conn:
                with conn.cursor() as cur:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                    if previous_owner_id:
                        previous_owner = get_user(previous_owner_id)
                        if previous_owner:
                            if slave_id in previous_owner.get("slaves", []):
                                previous_owner["slaves"].remove(slave_id)
                            
                            commission = int(price * 0.1)
                            previous_owner["balance"] += commission
                            previous_owner["total_income"] += commission
                            
                            if "shackles" in previous_owner and slave_id in previous_owner["shackles"]:
                                del previous_owner["shackles"][slave_id]
                            
                            update_user(previous_owner_id, previous_owner)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                    buyer["balance"] -= price
                    buyer.setdefault("slaves", []).append(slave_id)
                    update_user(buyer_id, buyer)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–∞
                    slave["owner"] = buyer_id
                    slave["slave_level"] = min(slave.get("slave_level", 0) + 1, 10)
                    slave["price"] = int(slave.get("base_price", 100) * (1.5 ** slave["slave_level"]))
                    slave["enslaved_date"] = datetime.now()
                    update_user(slave_id, slave)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    msg = [
                        f"‚úÖ –ö—É–ø–ª–µ–Ω @{slave.get('username', '–±–µ–∑—ã–º—è–Ω–Ω—ã–π')} –∑–∞ {price}‚ÇΩ",
                        f"‚ñ∏ –£—Ä–æ–≤–µ–Ω—å: {slave['slave_level']}",
                        f"‚ñ∏ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {slave['price']}‚ÇΩ",
                        f"‚ñ∏ –î–æ—Ö–æ–¥/—á–∞—Å: {100 * (1 + 0.3 * slave['slave_level'])}‚ÇΩ"
                    ]
                    
                    if previous_owner_id:
                        msg.append(f"‚ñ∏ –ö–æ–º–∏—Å—Å–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É: {commission}‚ÇΩ")

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–∞
                    try:
                        await bot.send_message(
                            slave_id,
                            f"‚ö° –í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω—ã @{buyer.get('username', 'unknown')} "
                            f"–∑–∞ {price}‚ÇΩ (—É—Ä–æ–≤–µ–Ω—å {slave['slave_level']})"
                        )
                    except Exception:
                        pass

                    await callback.message.edit_text("\n".join(msg), reply_markup=main_keyboard())
                    await callback.answer()

        finally:
            conn.close()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–∞: {e}", exc_info=True)
        await callback.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", show_alert=True)

@dp.callback_query(F.data.startswith(BUYOUT_PREFIX))
async def buyout_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = get_user(user_id)
        
        if not user or not user.get("registered"):
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return
            
        if not user.get("owner"):
            await callback.answer("‚ùå –í—ã –∏ —Ç–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–¥–∞–ª–æ–≤
        owner = get_user(user["owner"])
        if owner and owner.get("shackles", {}).get(user_id):
            shackles_end = owner["shackles"][user_id].strftime("%d.%m %H:%M")
            await callback.answer(
                f"‚õì –í—ã –≤ –∫–∞–Ω–¥–∞–ª–∞—Ö –¥–æ {shackles_end}!\n"
                f"–í—ã–∫—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω",
                show_alert=True
            )
            return

        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –≤—ã–∫—É–ø–∞
        base_price = user.get("base_price", 100)
        slave_level = user.get("slave_level", 0)
        buyout_price = int((base_price + user["balance"] * 0.05) * (1 + slave_level * 0.3))
        buyout_price = max(100, min(20000, buyout_price))
        
        if user.get("balance", 0) < buyout_price * 0.99:
            await callback.answer(
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {buyout_price - user['balance']:.0f}‚ÇΩ\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {buyout_price}‚ÇΩ",
                show_alert=True
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        conn = get_db_connection()
        try:
            with conn:
                with conn.cursor() as cur:
                    owner_id = user["owner"]
                    user["balance"] -= buyout_price
                    user["owner"] = None
                    user["price"] = base_price
                    user["total_spent"] = user.get("total_spent", 0) + buyout_price
                    user["buyout_count"] = user.get("buyout_count", 0) + 1
                    update_user(user_id, user)

                    if owner_id:
                        owner = get_user(owner_id)
                        if owner:
                            owner_income = int(buyout_price * 0.6)
                            owner["balance"] += owner_income
                            owner["total_income"] += owner_income
                            
                            if user_id in owner.get("slaves", []):
                                owner["slaves"].remove(user_id)
                            
                            update_user(owner_id, owner)
                            
                            try:
                                await bot.send_message(
                                    owner_id,
                                    f"üîì –†–∞–± @{user.get('username', 'unknown')} "
                                    f"–≤—ã–∫—É–ø–∏–ª—Å—è –∑–∞ {buyout_price}‚ÇΩ\n"
                                    f"–í–∞—à –¥–æ—Ö–æ–¥: {owner_income}‚ÇΩ"
                                )
                            except Exception:
                                pass

                    await callback.message.edit_text(
                        f"üéâ <b>–í—ã —Å–≤–æ–±–æ–¥–Ω—ã!</b>\n"
                        f"‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {buyout_price}‚ÇΩ\n"
                        f"‚ñ∏ –°–æ—Ö—Ä–∞–Ω—ë–Ω —É—Ä–æ–≤–µ–Ω—å: {slave_level}\n"
                        f"‚ñ∏ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price}‚ÇΩ\n\n"
                        f"<i>–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –ø–ª–∞—Ç–∏—Ç–µ 30% –Ω–∞–ª–æ–≥ –≤–ª–∞–¥–µ–ª—å—Ü—É</i>",
                        reply_markup=main_keyboard(),
                        parse_mode=ParseMode.HTML
                    )
                    await callback.answer()

        finally:
            conn.close()

    except Exception as e:
        logging.error(f"Buyout error: {e}", exc_info=True)
        await callback.answer("üåÄ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫—É–ø–µ", show_alert=True)
# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(F.data == PROFILE)
async def profile_handler(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        user = get_user(user_id)
        
        if not user or not user.get("registered"):
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –≤—ã–∫—É–ø–∞
        buyout_price = 0
        if user.get("owner"):
            base_price = user.get("base_price", 100)
            buyout_price = int((base_price + user["balance"] * 0.1) * (1 + user.get("slave_level", 0) * 0.5))
            buyout_price = max(100, min(10000, buyout_price))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = [
            f"üëë <b>–ü—Ä–æ—Ñ–∏–ª—å @{user.get('username', 'unknown')}</b>",
            f"‚ñ∏ üí∞ –ë–∞–ª–∞–Ω—Å: {user.get('balance', 0):.1f}‚ÇΩ",
            f"‚ñ∏ üë• –£—Ä–æ–≤–µ–Ω—å —Ä–∞–±–∞: {user.get('slave_level', 0)}",
            f"‚ñ∏ üõ† –£–ª—É—á—à–µ–Ω–∏—è: {sum(user.get('upgrades', {}).values())}",
            f"‚ñ∏ üõ° –©–∏—Ç: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if user.get('shield_active') and user['shield_active'] > datetime.now() else 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        ]
        
        if user.get("owner"):
            owner = get_user(user["owner"])
            owner_name = owner.get("username", "unknown") if owner else "unknown"
            text.append(
                f"‚ö†Ô∏è <b>–ù–∞–ª–æ–≥ —Ä–∞–±—Å—Ç–≤–∞:</b> 30% –¥–æ—Ö–æ–¥–∞ ‚Üí @{owner_name}\n"
                f"‚ñ∏ –¶–µ–Ω–∞ –≤—ã–∫—É–ø–∞: {buyout_price}‚ÇΩ"
            )
        else:
            text.append("üîó –í—ã —Å–≤–æ–±–æ–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫")
            
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–∫—É–ø–∞
        keyboard = []
        if user.get("owner"):
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üÜì –í—ã–∫—É–ø–∏—Ç—å—Å—è –∑–∞ {buyout_price}‚ÇΩ",
                    callback_data=f"{BUYOUT_PREFIX}{buyout_price}"
                )
            ])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
        
        await callback.message.edit_text(
            "\n".join(text),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode=ParseMode.HTML
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)

async def on_startup():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    conn = get_db_connection()
    try:
        with conn:
            with conn.cursor() as cur:
                cur.execute("""
                    CREATE TABLE IF NOT EXISTS bot_users (
                        user_id BIGINT PRIMARY KEY,
                        data JSONB NOT NULL,
                        last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                    )
                """)
                conn.commit()
    finally:
        conn.close()
    
    asyncio.create_task(passive_income_task())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    def signal_handler(*args):
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
    
    import signal
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
async def on_shutdown():
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")

async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler("bot.log", encoding='utf-8')
            ]
        )
        logger = logging.getLogger(__name__)
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await on_startup()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        await on_shutdown()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        # –î–ª—è Windows –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π event loop
        if os.name == 'nt':
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
            
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
