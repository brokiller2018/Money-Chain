import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPGRADE_PREFIX = "upg_"
SLAVE_PREFIX = "slv_"
MAIN_MENU = "main_menu"
WORK = "work"
UPGRADES = "upgrades"
PROFILE = "profile"
REF_LINK = "ref_link"
BUY_MENU = "buy_menu"
CHECK_SUB = "check_sub_"
SEARCH_USER = "search_user"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users = {}
user_search_cache = {}

# –£–ª—É—á—à–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
upgrades = {
    "storage": {
        "name": "üì¶ –°–∫–ª–∞–¥",
        "base_price": 500,
        "income_bonus": 10,
        "description": "+10 –º–æ–Ω–µ—Ç/–º–∏–Ω –∫ –ø–∞—Å—Å–∏–≤–Ω–æ–º—É –¥–æ—Ö–æ–¥—É –∑–∞ —É—Ä–æ–≤–µ–Ω—å",
        "effect": "passive"
    },
    "whip": {
        "name": "‚õì –ö–Ω—É—Ç—ã", 
        "base_price": 1000,
        "income_bonus": 25,
        "description": "+25% –∫ –¥–æ—Ö–æ–¥—É –æ—Ç —Ä–∞–±–æ—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å",
        "effect": "work"
    },
    "food": {
        "name": "üçó –ï–¥–∞",
        "base_price": 2000,
        "income_bonus": 50,
        "description": "-10% –∫ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å",
        "effect": "cooldown"
    },
    "barracks": {
        "name": "üè† –ë–∞—Ä–∞–∫–∏",
        "base_price": 5000,
        "income_bonus": 100,
        "description": "+5 –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–±–æ–≤ –∑–∞ —É—Ä–æ–≤–µ–Ω—å",
        "effect": "slaves"
    }
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data=WORK)],
        [
            InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data=UPGRADES),
            InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data=PROFILE)
        ],
        [
            InlineKeyboardButton(text="üë• –ö—É–ø–∏—Ç—å —Ä–∞–±–∞", callback_data=BUY_MENU),
            InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data=REF_LINK)
        ]
    ])

def upgrades_keyboard(user_id):
    buttons = []
    user = users[user_id]
    for upgrade_id, data in upgrades.items():
        level = user["upgrades"].get(upgrade_id, 0)
        price = data["base_price"] * (level + 1)
        effect = ""
        
        if data["effect"] == "passive":
            effect = f"(+{data['income_bonus']*{level+1}/–º–∏–Ω)"
        elif data["effect"] == "work":
            effect = f"(+{data['income_bonus']*level}%)"
        
        buttons.append([
            InlineKeyboardButton(
                text=f"{data['name']} ‚ü†{level} ‚Ä¢ {price}‚Ç≠ {effect}",
                callback_data=f"{UPGRADE_PREFIX}{upgrade_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=MAIN_MENU)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
async def passive_income_task():
    while True:
        await asyncio.sleep(60)
        now = datetime.now()
        for user_id, user in users.items():
            if "last_passive" in user:
                time_diff = (now - user["last_passive"]).total_seconds() / 60
                if time_diff >= 1:
                    # –†–∞—Å—á–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
                    passive = (1 + user["upgrades"]["storage"] * 10) * time_diff
                    user["balance"] += passive
                    user["last_passive"] = now
                    user["total_income"] += passive
                    
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚è≥ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥: +{passive:.1f}‚Ç≠\n"
                            f"‚ñ∏ –°–∫–ª–∞–¥: {user['upgrades']['storage']} —É—Ä."
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ)
WELCOME_MESSAGE = """
üéÆ <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –†–ê–ë–û–í–õ–ê–î–ï–õ–¨–ß–ï–°–ö–£–Æ –ò–ú–ü–ï–†–ò–Æ!</b> üëë

‚ö°Ô∏è <i>–°—Ç–∞–Ω—å —Å–∞–º—ã–º –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –≤ —ç—Ç–æ–º –∂–µ—Å—Ç–æ–∫–æ–º –º–∏—Ä–µ!</i>

‚ú® <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚ñ∏ üíº –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã —Ä–∞–±–æ—Ç–æ–π
‚ñ∏ üõ† –£–ª—É—á—à–∞–π —Å–≤–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è
‚ñ∏ üë• –ü–æ–∫—É–ø–∞–π –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
‚ñ∏ üìà –ü–æ–ª—É—á–∞–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥

üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É <b>üíº –†–∞–±–æ—Ç–∞—Ç—å</b> –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω
2. –í–∫–ª–∞–¥—ã–≤–∞–π—Å—è –≤ —É–ª—É—á—à–µ–Ω–∏—è
3. –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ
4. –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–π —Ä–∞–±–æ–≤ –¥–ª—è –¥–æ—Ö–æ–¥–∞

üìä <b>–î–æ—Ö–æ–¥ –≤ —Å–µ–∫—É–Ω–¥—É:</b>
‚ñ∏ –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: <i>0.016‚Ç≠/—Å–µ–∫</i>
‚ñ∏ –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è–º–∏
‚ñ∏ –†–∞–±—ã –¥–∞—é—Ç –±–æ–Ω—É—Å—ã

‚öîÔ∏è <b>–¢–≤–æ–π –ø—É—Ç—å –∫ –≤–µ–ª–∏—á–∏—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å!</b>
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"{CHECK_SUB}{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return
    
    if user_id not in users:
        users[user_id] = {
            "balance": 100,
            "slaves": [],
            "owner": None,
            "price": 100,
            "last_work": None,
            "upgrades": {key: 0 for key in upgrades},
            "total_income": 0,
            "username": username,
            "last_passive": datetime.now(),
            "income_per_sec": 0.0167  # 1 –º–æ–Ω–µ—Ç–∞ –≤ –º–∏–Ω—É—Ç—É
        }
        await message.answer(WELCOME_MESSAGE, reply_markup=main_keyboard())
        await message.answer(
            f"üë§ <b>@{username}</b>, —Ç–≤–æ–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n"
            f"‚ñ∏ üí∞ 100 –º–æ–Ω–µ—Ç\n"
            f"‚ñ∏ üõ† 0 —É–ª—É—á—à–µ–Ω–∏–π\n"
            f"‚ñ∏ üë• 0 —Ä–∞–±–æ–≤\n\n"
            f"‚ö°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!",
            reply_markup=main_keyboard()
        )
    else:
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

# –ü–æ–∏—Å–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É (–Ω–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
@dp.callback_query(F.data == SEARCH_USER)
async def search_user_handler(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ —Ä–∞–±–∞:</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –∏–≥—Ä–æ–∫–∞ (–±–µ–∑ —Å–æ–±–∞—á–∫–∏):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
        ])
    await callback.answer()

@dp.message(F.text & ~F.text.startswith('/'))
async def process_username(message: Message):
    username = message.text.strip().lower()
    buyer_id = message.from_user.id
    
    if not username.startswith('@'):
        username = '@' + username
    
    found_user = None
    for uid, data in users.items():
        if data["username"] and data["username"].lower() == username[1:].lower():
            found_user = uid
            break
    
    if not found_user:
        return await message.reply("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    if found_user == buyer_id:
        return await message.reply("üåÄ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
    
    slave = users[found_user]
    price = slave["price"]
    
    text = (
        f"üîé <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>\n\n"
        f"‚ñ∏ –ò–≥—Ä–æ–∫: @{slave['username']}\n"
        f"‚ñ∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚Ç≠\n"
        f"‚ñ∏ –í–ª–∞–¥–µ–ª–µ—Ü: @{users[slave['owner']]['username'] if slave['owner'] else '–°–≤–æ–±–æ–¥–µ–Ω'}\n"
        f"‚ñ∏ –£—Ä–æ–≤–Ω–∏ —É–ª—É—á—à–µ–Ω–∏–π: {sum(slave['upgrades'].values()}\n\n"
        f"üí° –¶–µ–Ω–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 50% –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üí∞ –ö—É–ø–∏—Ç—å –∑–∞ {price}‚Ç≠", callback_data=f"{SLAVE_PREFIX}{found_user}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=BUY_MENU)]
    ])
    
    await message.reply(text, reply_markup=kb)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query(F.data == PROFILE)
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    slaves_count = len(user["slaves"])
    max_slaves = 5 + user["upgrades"]["barracks"] * 5
    income_per_sec = (1 + user["upgrades"]["storage"] * 10) / 60
    
    text = (
        f"üëë <b>–ü—Ä–æ—Ñ–∏–ª—å @{user['username']}</b>\n\n"
        f"‚ñ∏ üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']:.1f}‚Ç≠\n"
        f"‚ñ∏ ‚ö° –î–æ—Ö–æ–¥/—Å–µ–∫: {income_per_sec:.3f}‚Ç≠\n"
        f"‚ñ∏ üë• –†–∞–±—ã: {slaves_count}/{max_slaves}\n"
        f"‚ñ∏ üõ† –£–ª—É—á—à–µ–Ω–∏—è: {sum(user['upgrades'].values())}\n"
        f"‚ñ∏ üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_income']:.1f}‚Ç≠\n\n"
    )
    
    if user["owner"]:
        text += f"üîó –í–ª–∞–¥–µ–ª–µ—Ü: @{users[user['owner']]['username']}\n"
    else:
        text += "üîó –í—ã —Å–≤–æ–±–æ–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫!\n"
    
    if slaves_count > 0:
        text += "\n<b>–¢–æ–ø —Ä–∞–±–æ–≤:</b>\n"
        for uid in user["slaves"][:3]:
            text += f"‚ñ∏ @{users[uid]['username']} ({users[uid]['price']}‚Ç≠)\n"
    
    await callback.message.edit_text(text, reply_markup=main_keyboard())
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
async def on_startup():
    asyncio.create_task(passive_income_task())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(on_startup())
    asyncio.run(dp.start_polling(bot))
