import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram import F
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8076628423:AAEkp4l3BYkl-6lwz8VAyMw0h7AaAM7J3oM"
CHANNEL_ID = "@memok_da"
CHANNEL_LINK = "https://t.me/memok_da"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —É–ª—É—á—à–µ–Ω–∏—è
users = {}
upgrades = {
    "storage": {"name": "üì¶ –°–∫–ª–∞–¥", "base_price": 500, "income_bonus": 10},
    "whip": {"name": "‚õì –ö–Ω—É—Ç—ã", "base_price": 1000, "income_bonus": 25},
    "food": {"name": "üçó –ï–¥–∞", "base_price": 2000, "income_bonus": 50},
    "barracks": {"name": "üè† –ë–∞—Ä–∞–∫–∏", "base_price": 5000, "income_bonus": 100}
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞—Ç—å", callback_data="work")],
        [InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data="upgrades"),
         InlineKeyboardButton(text="üìä –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="ref_link")]
    ])

def upgrades_keyboard(user_id):
    buttons = []
    for upgrade_id, data in upgrades.items():
        level = users[user_id].get("upgrades", {}).get(upgrade_id, 0)
        price = data["base_price"] * (level + 1)
        buttons.append([
            InlineKeyboardButton(
                text=f"{data['name']} (–£—Ä. {level}) - {price} –º–æ–Ω–µ—Ç",
                callback_data=f"buy_{upgrade_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(Command('start'))
async def start_command(message: Message):
    user_id = message.from_user.id
    
    if not await check_subscription(user_id):
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=CHANNEL_LINK)],
            [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data=f"check_sub_{user_id}")]
        ])
        await message.answer("üìå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return
    
    if user_id not in users:
        users[user_id] = {
            "balance": 100,
            "slaves": [],
            "owner": None,
            "price": 100,
            "last_work": None,
            "upgrades": {key: 0 for key in upgrades},
            "total_income": 0
        }
        await message.answer("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Slave Empire!", reply_markup=main_keyboard())
    else:
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@dp.callback_query(F.data.startswith("check_sub_"))
async def check_sub_callback(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    if await check_subscription(user_id):
        if user_id not in users:
            users[user_id] = {
                "balance": 100,
                "slaves": [],
                "owner": None,
                "price": 100,
                "last_work": None,
                "upgrades": {key: 0 for key in upgrades},
                "total_income": 0
            }
            await callback.message.edit_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            await callback.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)
    await callback.answer()

@dp.callback_query(F.data == "work")
async def work_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return
    
    now = datetime.now()
    cooldown = timedelta(minutes=20)
    
    if user["last_work"] and (now - user["last_work"]) < cooldown:
        remaining = (user["last_work"] + cooldown - now).seconds // 60
        await callback.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining} –º–∏–Ω—É—Ç", show_alert=True)
        return
    
    # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞
    base_income = 50
    slaves_income = len(user["slaves"]) * 100
    upgrades_bonus = sum(
        users[user_id]["upgrades"][upgrade] * data["income_bonus"]
        for upgrade, data in upgrades.items()
    )
    
    total_income = base_income + slaves_income + upgrades_bonus
    users[user_id]["balance"] += total_income
    users[user_id]["last_work"] = now
    users[user_id]["total_income"] += total_income
    
    await callback.message.edit_text(
        f"üíº –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_income} –º–æ–Ω–µ—Ç\n\n"
        f"üìä –†–∞–∑–±–∏–≤–∫–∞:\n"
        f"‚Ä¢ –ë–∞–∑–∞: {base_income}\n"
        f"‚Ä¢ –†–∞–±—ã: {slaves_income}\n"
        f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏—è: {upgrades_bonus}",
        reply_markup=main_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "upgrades")
async def upgrades_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in users:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    await callback.message.edit_text( 
        "üõ† –£–ª—É—á—à–µ–Ω–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –¥–æ—Ö–æ–¥ –æ—Ç —Ä–∞–±–æ—Ç—ã:",
        reply_markup=upgrades_keyboard(user_id)  
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("buy_"))
async def buy_upgrade(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    upgrade_id = callback.data.split("_")[1]
    
    if upgrade_id not in upgrades:
        await callback.answer("‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    current_level = users[user_id]["upgrades"].get(upgrade_id, 0)
    price = upgrades[upgrade_id]["base_price"] * (current_level + 1)
    
    if users[user_id]["balance"] < price:
        await callback.answer(f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {price - users[user_id]['balance']} –º–æ–Ω–µ—Ç", show_alert=True)
        return
    
    users[user_id]["balance"] -= price
    users[user_id]["upgrades"][upgrade_id] += 1
    
    await callback.message.edit_text(  
        f"üéâ {upgrades[upgrade_id]['name']} —É–ª—É—á—à–µ–Ω–æ –¥–æ —É—Ä–æ–≤–Ω—è {users[user_id]['upgrades'][upgrade_id]}!",
        reply_markup=upgrades_keyboard(user_id)  
    )
    await callback.answer()

@dp.callback_query(F.data == "profile")
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = users.get(user_id)
    
    if not user:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n"
        f"üß∑ –†–∞–±–æ–≤: {len(user['slaves'])}\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['total_income']}\n"
        f"üõ† –£–ª—É—á—à–µ–Ω–∏—è: {sum(user['upgrades'].values())}"
    )
    
    await callback.message.edit_text(profile_text, reply_markup=main_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "ref_link")
async def ref_link_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in users:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", show_alert=True)
        return
    
    ref_link = f"https://t.me/{(await bot.get_me()).username}?start={user_id}"
    await callback.message.edit_text(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        f"üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ:\n"
        f"+1 —Ä–∞–± –∏ 50 –º–æ–Ω–µ—Ç",
        reply_markup=main_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.callback_query(F.data == "main_menu")
async def main_menu_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    await callback.answer()

async def check_subscription(user_id: int):
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status not in ['left', 'kicked']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
